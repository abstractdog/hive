Warning: Shuffle Join MERGEJOIN[899][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[911][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[901][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[923][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 14' is a cross product
Warning: Shuffle Join MERGEJOIN[903][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[935][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 12 <- Union 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 57 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 15 <- Map 1 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 17 <- Union 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 61 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 23 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 27 <- Union 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 24 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 30 <- Union 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 24 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 33 <- Union 32 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 36 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 37 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 40 <- Map 38 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 41 <- Map 38 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 43 <- Map 42 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 44 <- Map 42 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 45 <- Map 42 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 49 <- Map 48 (SIMPLE_EDGE), Map 53 (SIMPLE_EDGE)
Reducer 5 <- Reducer 27 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 50 <- Reducer 49 (SIMPLE_EDGE), Reducer 68 (SIMPLE_EDGE)
Reducer 51 <- Map 90 (SIMPLE_EDGE), Reducer 50 (SIMPLE_EDGE)
Reducer 52 <- Reducer 51 (SIMPLE_EDGE)
Reducer 54 <- Map 53 (SIMPLE_EDGE), Map 91 (SIMPLE_EDGE)
Reducer 55 <- Reducer 54 (SIMPLE_EDGE), Reducer 72 (SIMPLE_EDGE)
Reducer 56 <- Map 90 (SIMPLE_EDGE), Reducer 55 (SIMPLE_EDGE)
Reducer 57 <- Reducer 56 (SIMPLE_EDGE)
Reducer 58 <- Map 53 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE)
Reducer 59 <- Reducer 58 (SIMPLE_EDGE), Reducer 76 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Map 90 (SIMPLE_EDGE), Reducer 59 (SIMPLE_EDGE)
Reducer 61 <- Reducer 60 (SIMPLE_EDGE)
Reducer 63 <- Map 62 (SIMPLE_EDGE), Map 77 (SIMPLE_EDGE)
Reducer 64 <- Map 90 (SIMPLE_EDGE), Reducer 63 (SIMPLE_EDGE)
Reducer 65 <- Reducer 64 (SIMPLE_EDGE), Union 66 (CONTAINS)
Reducer 67 <- Union 66 (SIMPLE_EDGE)
Reducer 68 <- Map 90 (SIMPLE_EDGE), Reducer 67 (SIMPLE_EDGE)
Reducer 69 <- Reducer 64 (SIMPLE_EDGE), Union 70 (CONTAINS)
Reducer 71 <- Union 70 (SIMPLE_EDGE)
Reducer 72 <- Map 90 (SIMPLE_EDGE), Reducer 71 (SIMPLE_EDGE)
Reducer 73 <- Reducer 64 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 75 <- Union 74 (SIMPLE_EDGE)
Reducer 76 <- Map 90 (SIMPLE_EDGE), Reducer 75 (SIMPLE_EDGE)
Reducer 78 <- Map 77 (SIMPLE_EDGE), Map 88 (SIMPLE_EDGE)
Reducer 79 <- Map 90 (SIMPLE_EDGE), Reducer 78 (SIMPLE_EDGE)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 80 <- Reducer 79 (SIMPLE_EDGE), Union 66 (CONTAINS)
Reducer 81 <- Reducer 79 (SIMPLE_EDGE), Union 70 (CONTAINS)
Reducer 82 <- Reducer 79 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 83 <- Map 77 (SIMPLE_EDGE), Map 89 (SIMPLE_EDGE)
Reducer 84 <- Map 90 (SIMPLE_EDGE), Reducer 83 (SIMPLE_EDGE)
Reducer 85 <- Reducer 84 (SIMPLE_EDGE), Union 66 (CONTAINS)
Reducer 86 <- Reducer 84 (SIMPLE_EDGE), Union 70 (CONTAINS)
Reducer 87 <- Reducer 84 (SIMPLE_EDGE), Union 74 (CONTAINS)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1137]
        Limit [LIM_1136] (rows=7 width=212)
          Number of rows:100
          Select Operator [SEL_1135] (rows=7 width=212)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1134]
              Select Operator [SEL_1133] (rows=7 width=212)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1132] (rows=7 width=220)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 14 [CONTAINS]
                    Reduce Output Operator [RS_928]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_927] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_925] (rows=1 width=223)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_924] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_923] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_377]
                                Merge Join Operator [MERGEJOIN_901] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1143]
                                    Select Operator [SEL_1142] (rows=1 width=8)
                                      Filter Operator [FIL_1141] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1140] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1139] (rows=1 width=8)
                                            Group By Operator [GBY_1138] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 11 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 10 [CONTAINS]
                                                Reduce Output Operator [RS_922]
                                                  Group By Operator [GBY_921] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_920] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_918] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_917] (rows=14736682 width=0)
                                                          Conds:RS_1070._col0=RS_1079._col0(Inner),Output:["_col1"]
                                                        <-Map 77 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1079]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1073] (rows=1957 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1072] (rows=1957 width=8)
                                                                predicate:d_year BETWEEN 1999 AND 2001
                                                                TableScan [TS_96] (rows=73049 width=8)
                                                                  default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1070]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1068] (rows=550076554 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1067] (rows=550076554 width=7)
                                                                predicate:ss_sold_date_sk is not null
                                                                TableScan [TS_0] (rows=575995635 width=7)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity"]
                                              <-Reducer 22 [CONTAINS]
                                                Reduce Output Operator [RS_952]
                                                  Group By Operator [GBY_951] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_950] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_948] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_947] (rows=7676736 width=3)
                                                          Conds:RS_1181._col0=RS_1187._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1187]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1184] (rows=1957 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1183] (rows=1957 width=8)
                                                                predicate:d_year BETWEEN 1998 AND 2000
                                                                TableScan [TS_13] (rows=73049 width=8)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1181]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1179] (rows=286549727 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1178] (rows=286549727 width=7)
                                                                predicate:cs_sold_date_sk is not null
                                                                TableScan [TS_10] (rows=287989836 width=7)
                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity"]
                                              <-Reducer 36 [CONTAINS]
                                                Reduce Output Operator [RS_988]
                                                  Group By Operator [GBY_987] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_986] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_984] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_983] (rows=3856907 width=3)
                                                          Conds:RS_1199._col0=RS_1205._col0(Inner),Output:["_col1"]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1205]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1202] (rows=1957 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1201] (rows=1957 width=8)
                                                                predicate:d_year BETWEEN 1998 AND 2000
                                                                TableScan [TS_24] (rows=73049 width=8)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1199]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1197] (rows=143966864 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1196] (rows=143966864 width=7)
                                                                predicate:ws_sold_date_sk is not null
                                                                TableScan [TS_21] (rows=144002668 width=7)
                                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity"]
                                <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1147]
                                    Select Operator [SEL_1146] (rows=1 width=112)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1145] (rows=1 width=120)
                                        predicate:(_col0 is not null and _col1 is not null)
                                        Group By Operator [GBY_1144] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 29 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 28 [CONTAINS]
                                            Reduce Output Operator [RS_970]
                                              Group By Operator [GBY_969] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_968] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_966] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_965] (rows=7676736 width=94)
                                                      Conds:RS_1194._col0=RS_1188._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1188]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1184]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1194]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1192] (rows=286549727 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1191] (rows=286549727 width=119)
                                                            predicate:cs_sold_date_sk is not null
                                                            TableScan [TS_55] (rows=287989836 width=119)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                          <-Reducer 40 [CONTAINS]
                                            Reduce Output Operator [RS_1006]
                                              Group By Operator [GBY_1005] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1004] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1002] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1001] (rows=3856907 width=114)
                                                      Conds:RS_1212._col0=RS_1206._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1206]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1202]
                                                    <-Map 47 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1212]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1210] (rows=143966864 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1209] (rows=143966864 width=119)
                                                            predicate:ws_sold_date_sk is not null
                                                            TableScan [TS_66] (rows=144002668 width=119)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                          <-Reducer 44 [CONTAINS]
                                            Reduce Output Operator [RS_1024]
                                              Group By Operator [GBY_1023] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1022] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1020] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1019] (rows=14736682 width=0)
                                                      Conds:RS_1217._col0=RS_1080._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 77 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1080]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1073]
                                                    <-Map 42 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1217]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1215] (rows=550076554 width=114)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1214] (rows=550076554 width=114)
                                                            predicate:ss_sold_date_sk is not null
                                                            TableScan [TS_45] (rows=575995635 width=114)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                            <-Reducer 57 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1157]
                                Filter Operator [FIL_1156] (rows=1 width=132)
                                  predicate:_col3 is not null
                                  Group By Operator [GBY_1155] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 56 [SIMPLE_EDGE]
                                    SHUFFLE [RS_370]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_369] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_367] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_870] (rows=1 width=128)
                                            Conds:RS_364._col1=RS_1119._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                          <-Map 90 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1119]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1110] (rows=462000 width=15)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                TableScan [TS_165] (rows=462000 width=15)
                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                          <-Reducer 55 [SIMPLE_EDGE]
                                            SHUFFLE [RS_364]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_869] (rows=1 width=120)
                                                Conds:RS_361._col1=RS_362._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Reducer 54 [SIMPLE_EDGE]
                                                SHUFFLE [RS_361]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_861] (rows=7790806 width=98)
                                                    Conds:RS_1150._col0=RS_1099._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 53 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1099]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1097] (rows=50 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1096] (rows=50 width=12)
                                                          predicate:((d_moy = 11) and (d_year = 2000))
                                                          TableScan [TS_87] (rows=73049 width=12)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                  <-Map 91 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1150]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1149] (rows=286549727 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1148] (rows=286549727 width=123)
                                                          predicate:cs_sold_date_sk is not null
                                                          TableScan [TS_275] (rows=287989836 width=123)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                              <-Reducer 72 [SIMPLE_EDGE]
                                                SHUFFLE [RS_362]
                                                  PartitionCols:_col0
                                                  Merge Join Operator [MERGEJOIN_868] (rows=724 width=4)
                                                    Conds:RS_1127._col1, _col2, _col3=RS_1154._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 90 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1127]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1120] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1111] (rows=458612 width=15)
                                                          predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                           Please refer to the previous TableScan [TS_165]
                                                  <-Reducer 71 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1154]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1153] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1152] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1151] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 70 [SIMPLE_EDGE]
                                                            <-Reducer 69 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1227]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1226] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1225] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 64 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_301]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_109] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_853] (rows=14628613 width=11)
                                                                          Conds:RS_105._col1=RS_1124._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 90 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1124]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1116] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1107] (rows=458612 width=15)
                                                                                predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                                                 Please refer to the previous TableScan [TS_165]
                                                                        <-Reducer 63 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_105]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_852] (rows=14736682 width=4)
                                                                              Conds:RS_1221._col0=RS_1074._col0(Inner),Output:["_col1"]
                                                                            <-Map 77 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1074]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1073]
                                                                            <-Map 62 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1221]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1220] (rows=550076554 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1219] (rows=550076554 width=7)
                                                                                    predicate:ss_sold_date_sk is not null
                                                                                    TableScan [TS_93] (rows=575995635 width=7)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                            <-Reducer 81 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1239]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1238] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1237] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 79 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_321]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_129] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_855] (rows=7620440 width=11)
                                                                          Conds:RS_125._col1=RS_1125._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 90 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1125]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1117] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1108] (rows=458612 width=15)
                                                                                predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                                                 Please refer to the previous TableScan [TS_165]
                                                                        <-Reducer 78 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_125]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_854] (rows=7676736 width=4)
                                                                              Conds:RS_1233._col0=RS_1075._col0(Inner),Output:["_col1"]
                                                                            <-Map 77 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1075]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1073]
                                                                            <-Map 88 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1233]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1232] (rows=286549727 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1231] (rows=286549727 width=7)
                                                                                    predicate:cs_sold_date_sk is not null
                                                                                    TableScan [TS_113] (rows=287989836 width=7)
                                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                            <-Reducer 86 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1251]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1250] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1249] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 84 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_342]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                      Group By Operator [GBY_150] (rows=121728 width=19)
                                                                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col5, _col6
                                                                        Merge Join Operator [MERGEJOIN_857] (rows=3828623 width=11)
                                                                          Conds:RS_146._col1=RS_1126._col0(Inner),Output:["_col4","_col5","_col6"]
                                                                        <-Map 90 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1126]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1118] (rows=458612 width=15)
                                                                              Output:["_col0","_col1","_col2","_col3"]
                                                                              Filter Operator [FIL_1109] (rows=458612 width=15)
                                                                                predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                                                 Please refer to the previous TableScan [TS_165]
                                                                        <-Reducer 83 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_146]
                                                                            PartitionCols:_col1
                                                                            Merge Join Operator [MERGEJOIN_856] (rows=3856907 width=4)
                                                                              Conds:RS_1245._col0=RS_1076._col0(Inner),Output:["_col1"]
                                                                            <-Map 77 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1076]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1073]
                                                                            <-Map 89 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1245]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1244] (rows=143966864 width=7)
                                                                                  Output:["_col0","_col1"]
                                                                                  Filter Operator [FIL_1243] (rows=143966864 width=7)
                                                                                    predicate:ws_sold_date_sk is not null
                                                                                    TableScan [TS_134] (rows=144002668 width=7)
                                                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                  <-Reducer 19 [CONTAINS]
                    Reduce Output Operator [RS_940]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_939] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_937] (rows=1 width=219)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_936] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_935] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 18 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_569]
                                Merge Join Operator [MERGEJOIN_903] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1163]
                                    Select Operator [SEL_1162] (rows=1 width=8)
                                      Filter Operator [FIL_1161] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1160] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1159] (rows=1 width=8)
                                            Group By Operator [GBY_1158] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 16 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 15 [CONTAINS]
                                                Reduce Output Operator [RS_934]
                                                  Group By Operator [GBY_933] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_932] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_930] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_929] (rows=14736682 width=0)
                                                          Conds:RS_1071._col0=RS_1081._col0(Inner),Output:["_col1"]
                                                        <-Map 77 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1081]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1073]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1071]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1068]
                                              <-Reducer 23 [CONTAINS]
                                                Reduce Output Operator [RS_958]
                                                  Group By Operator [GBY_957] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_956] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_954] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_953] (rows=7676736 width=3)
                                                          Conds:RS_1182._col0=RS_1189._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1189]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1184]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1182]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1179]
                                              <-Reducer 37 [CONTAINS]
                                                Reduce Output Operator [RS_994]
                                                  Group By Operator [GBY_993] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_992] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_990] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_989] (rows=3856907 width=3)
                                                          Conds:RS_1200._col0=RS_1207._col0(Inner),Output:["_col1"]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1207]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1202]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1200]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1197]
                                <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1167]
                                    Select Operator [SEL_1166] (rows=1 width=112)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1165] (rows=1 width=120)
                                        predicate:(_col0 is not null and _col1 is not null)
                                        Group By Operator [GBY_1164] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 32 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 31 [CONTAINS]
                                            Reduce Output Operator [RS_976]
                                              Group By Operator [GBY_975] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_974] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_972] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_971] (rows=7676736 width=94)
                                                      Conds:RS_1195._col0=RS_1190._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1190]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1184]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1195]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1192]
                                          <-Reducer 41 [CONTAINS]
                                            Reduce Output Operator [RS_1012]
                                              Group By Operator [GBY_1011] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1010] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1008] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1007] (rows=3856907 width=114)
                                                      Conds:RS_1213._col0=RS_1208._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1208]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1202]
                                                    <-Map 47 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1213]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1210]
                                          <-Reducer 45 [CONTAINS]
                                            Reduce Output Operator [RS_1030]
                                              Group By Operator [GBY_1029] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1028] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1026] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1025] (rows=14736682 width=0)
                                                      Conds:RS_1218._col0=RS_1082._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 77 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1082]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1073]
                                                    <-Map 42 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1218]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1215]
                            <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1177]
                                Filter Operator [FIL_1176] (rows=1 width=132)
                                  predicate:_col3 is not null
                                  Group By Operator [GBY_1175] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 60 [SIMPLE_EDGE]
                                    SHUFFLE [RS_562]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_561] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_559] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_880] (rows=1 width=128)
                                            Conds:RS_556._col1=RS_1121._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                          <-Map 90 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1121]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1112] (rows=462000 width=15)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                 Please refer to the previous TableScan [TS_165]
                                          <-Reducer 59 [SIMPLE_EDGE]
                                            SHUFFLE [RS_556]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_879] (rows=1 width=120)
                                                Conds:RS_553._col1=RS_554._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Reducer 58 [SIMPLE_EDGE]
                                                SHUFFLE [RS_553]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_871] (rows=3942084 width=118)
                                                    Conds:RS_1170._col0=RS_1100._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 53 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1100]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1097]
                                                  <-Map 92 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1170]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1169] (rows=143966864 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1168] (rows=143966864 width=123)
                                                          predicate:ws_sold_date_sk is not null
                                                          TableScan [TS_467] (rows=144002668 width=123)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                              <-Reducer 76 [SIMPLE_EDGE]
                                                SHUFFLE [RS_554]
                                                  PartitionCols:_col0
                                                  Merge Join Operator [MERGEJOIN_878] (rows=724 width=4)
                                                    Conds:RS_1128._col1, _col2, _col3=RS_1174._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 90 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1128]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1122] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1113] (rows=458612 width=15)
                                                          predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                           Please refer to the previous TableScan [TS_165]
                                                  <-Reducer 75 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1174]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1173] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1172] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1171] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 74 [SIMPLE_EDGE]
                                                            <-Reducer 73 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1230]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1229] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1228] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 64 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_493]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_109]
                                                            <-Reducer 82 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1242]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1241] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1240] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 79 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_513]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_129]
                                                            <-Reducer 87 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1254]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1253] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1252] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 84 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_534]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_150]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_916]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_915] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_913] (rows=1 width=221)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_912] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_911] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_186]
                                Merge Join Operator [MERGEJOIN_899] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1092]
                                    Select Operator [SEL_1091] (rows=1 width=112)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1090] (rows=1 width=120)
                                        predicate:(_col0 is not null and _col1 is not null)
                                        Group By Operator [GBY_1089] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 26 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 25 [CONTAINS]
                                            Reduce Output Operator [RS_964]
                                              Group By Operator [GBY_963] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_962] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_960] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_959] (rows=7676736 width=94)
                                                      Conds:RS_1193._col0=RS_1186._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1186]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1184]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1193]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1192]
                                          <-Reducer 39 [CONTAINS]
                                            Reduce Output Operator [RS_1000]
                                              Group By Operator [GBY_999] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_998] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_996] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_995] (rows=3856907 width=114)
                                                      Conds:RS_1211._col0=RS_1204._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1204]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1202]
                                                    <-Map 47 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1211]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1210]
                                          <-Reducer 43 [CONTAINS]
                                            Reduce Output Operator [RS_1018]
                                              Group By Operator [GBY_1017] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1016] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1014] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1013] (rows=14736682 width=0)
                                                      Conds:RS_1216._col0=RS_1078._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 77 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1078]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1073]
                                                    <-Map 42 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1216]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1215]
                                <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1088]
                                    Select Operator [SEL_1087] (rows=1 width=8)
                                      Filter Operator [FIL_1086] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1085] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1084] (rows=1 width=8)
                                            Group By Operator [GBY_1083] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 2 [CONTAINS]
                                                Reduce Output Operator [RS_910]
                                                  Group By Operator [GBY_909] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_908] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_906] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_905] (rows=14736682 width=0)
                                                          Conds:RS_1069._col0=RS_1077._col0(Inner),Output:["_col1"]
                                                        <-Map 77 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1077]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1073]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1069]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1068]
                                              <-Reducer 21 [CONTAINS]
                                                Reduce Output Operator [RS_946]
                                                  Group By Operator [GBY_945] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_944] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_942] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_941] (rows=7676736 width=3)
                                                          Conds:RS_1180._col0=RS_1185._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1185]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1184]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1180]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1179]
                                              <-Reducer 35 [CONTAINS]
                                                Reduce Output Operator [RS_982]
                                                  Group By Operator [GBY_981] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_980] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_978] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_977] (rows=3856907 width=3)
                                                          Conds:RS_1198._col0=RS_1203._col0(Inner),Output:["_col1"]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1203]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1202]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1198]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1197]
                            <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1131]
                                Filter Operator [FIL_1130] (rows=1 width=132)
                                  predicate:_col3 is not null
                                  Group By Operator [GBY_1129] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 51 [SIMPLE_EDGE]
                                    SHUFFLE [RS_179]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_178] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_176] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_860] (rows=1 width=128)
                                            Conds:RS_173._col1=RS_1114._col0(Inner),Output:["_col2","_col3","_col7","_col8","_col9"]
                                          <-Map 90 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1114]
                                              PartitionCols:_col0
                                              Select Operator [SEL_1105] (rows=462000 width=15)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                 Please refer to the previous TableScan [TS_165]
                                          <-Reducer 50 [SIMPLE_EDGE]
                                            SHUFFLE [RS_173]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_859] (rows=1 width=120)
                                                Conds:RS_170._col1=RS_171._col0(Inner),Output:["_col1","_col2","_col3"]
                                              <-Reducer 49 [SIMPLE_EDGE]
                                                SHUFFLE [RS_170]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_851] (rows=15062131 width=4)
                                                    Conds:RS_1095._col0=RS_1098._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 53 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1098]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1097]
                                                  <-Map 48 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1095]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1094] (rows=550076554 width=118)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1093] (rows=550076554 width=118)
                                                          predicate:ss_sold_date_sk is not null
                                                          TableScan [TS_84] (rows=575995635 width=118)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                              <-Reducer 68 [SIMPLE_EDGE]
                                                SHUFFLE [RS_171]
                                                  PartitionCols:_col0
                                                  Merge Join Operator [MERGEJOIN_858] (rows=724 width=4)
                                                    Conds:RS_1123._col1, _col2, _col3=RS_1104._col0, _col1, _col2(Inner),Output:["_col0"]
                                                  <-Map 90 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1123]
                                                      PartitionCols:_col1, _col2, _col3
                                                      Select Operator [SEL_1115] (rows=458612 width=15)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1106] (rows=458612 width=15)
                                                          predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null)
                                                           Please refer to the previous TableScan [TS_165]
                                                  <-Reducer 67 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1104]
                                                      PartitionCols:_col0, _col1, _col2
                                                      Select Operator [SEL_1103] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_1102] (rows=1 width=20)
                                                          predicate:(_col3 = 3L)
                                                          Group By Operator [GBY_1101] (rows=121728 width=19)
                                                            Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                          <-Union 66 [SIMPLE_EDGE]
                                                            <-Reducer 65 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1224]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1223] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1222] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 64 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_110]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_109]
                                                            <-Reducer 80 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1236]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1235] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1234] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 79 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_130]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_129]
                                                            <-Reducer 85 [CONTAINS] vectorized
                                                              Reduce Output Operator [RS_1248]
                                                                PartitionCols:_col0, _col1, _col2
                                                                Group By Operator [GBY_1247] (rows=121728 width=19)
                                                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1246] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                  <-Reducer 84 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_151]
                                                                      PartitionCols:_col0, _col1, _col2
                                                                       Please refer to the previous Group By Operator [GBY_150]

