PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 29 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 15 <- Map 29 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 13 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 18 <- Map 29 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 23 <- Map 29 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Map 21 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 26 <- Map 29 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE)
Reducer 3 <- Map 29 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 16 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 24 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Map 28 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_317]
        Limit [LIM_316] (rows=100 width=85)
          Number of rows:100
          Select Operator [SEL_315] (rows=16273770 width=85)
            Output:["_col0"]
          <-Reducer 7 [SIMPLE_EDGE]
            SHUFFLE [RS_135]
              Select Operator [SEL_134] (rows=16273770 width=85)
                Output:["_col0"]
                Filter Operator [FIL_133] (rows=16273770 width=541)
                  predicate:((_col5 is not null and ((_col8 and ((_col11 / _col7) > (_col16 / _col5))) or _col9)) or (null and _col5 is null))
                  Merge Join Operator [MERGEJOIN_266] (rows=24410657 width=541)
                    Conds:RS_130._col4=RS_314._col0(Inner),Output:["_col5","_col7","_col8","_col9","_col11","_col15","_col16"]
                  <-Reducer 24 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_314]
                      PartitionCols:_col0
                      Select Operator [SEL_313] (rows=80000000 width=297)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_312] (rows=80000000 width=764)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 23 [SIMPLE_EDGE]
                          SHUFFLE [RS_114]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_113] (rows=80000000 width=764)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                              Merge Join Operator [MERGEJOIN_261] (rows=187573258 width=764)
                                Conds:RS_109._col1=RS_283._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                              <-Map 29 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_283]
                                  PartitionCols:_col0
                                  Select Operator [SEL_282] (rows=80000000 width=656)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                    TableScan [TS_104] (rows=80000000 width=656)
                                      default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                              <-Reducer 22 [SIMPLE_EDGE]
                                SHUFFLE [RS_109]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_260] (rows=187573258 width=115)
                                    Conds:RS_106._col0=RS_276._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 28 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_276]
                                      PartitionCols:_col0
                                      Select Operator [SEL_272] (rows=652 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_268] (rows=652 width=8)
                                          predicate:(d_year = 2002)
                                          TableScan [TS_101] (rows=73049 width=8)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                  <-Map 21 [SIMPLE_EDGE]
                                    SHUFFLE [RS_106]
                                      PartitionCols:_col0
                                      Select Operator [SEL_100] (rows=525327388 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_244] (rows=525327388 width=435)
                                          predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                          TableScan [TS_98] (rows=575995635 width=435)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                  <-Reducer 6 [SIMPLE_EDGE]
                    SHUFFLE [RS_130]
                      PartitionCols:_col4
                      Filter Operator [FIL_129] (rows=20413487 width=676)
                        predicate:((_col2 and ((_col8 and ((_col11 / _col7) > (_col13 / _col1))) or _col9)) or _col3)
                        Merge Join Operator [MERGEJOIN_265] (rows=24496187 width=676)
                          Conds:RS_126._col4=RS_311._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col11","_col13"]
                        <-Reducer 16 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_311]
                            PartitionCols:_col0
                            Select Operator [SEL_310] (rows=51391963 width=212)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_309] (rows=51391963 width=764)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                              <-Reducer 15 [SIMPLE_EDGE]
                                SHUFFLE [RS_95]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Group By Operator [GBY_94] (rows=51391963 width=764)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                    Merge Join Operator [MERGEJOIN_259] (rows=51391963 width=764)
                                      Conds:RS_90._col1=RS_284._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_284]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_282]
                                    <-Reducer 14 [SIMPLE_EDGE]
                                      SHUFFLE [RS_90]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_258] (rows=51391963 width=115)
                                          Conds:RS_87._col0=RS_277._col0(Inner),Output:["_col1","_col2"]
                                        <-Map 28 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_277]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_272]
                                        <-Map 13 [SIMPLE_EDGE]
                                          SHUFFLE [RS_87]
                                            PartitionCols:_col0
                                            Select Operator [SEL_81] (rows=143930993 width=119)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_241] (rows=143930993 width=455)
                                                predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                TableScan [TS_79] (rows=144002668 width=455)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                        <-Reducer 5 [SIMPLE_EDGE]
                          SHUFFLE [RS_126]
                            PartitionCols:_col4
                            Merge Join Operator [MERGEJOIN_264] (rows=20485012 width=564)
                              Conds:RS_123._col4=RS_291._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col11"]
                            <-Reducer 12 [SIMPLE_EDGE]
                              SHUFFLE [RS_123]
                                PartitionCols:_col4
                                Merge Join Operator [MERGEJOIN_263] (rows=17130654 width=452)
                                  Conds:RS_120._col4=RS_296._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9"]
                                <-Reducer 11 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_296]
                                    PartitionCols:_col0
                                    Select Operator [SEL_295] (rows=26666666 width=220)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_294] (rows=26666666 width=212)
                                        predicate:(_col7 > 0)
                                        Select Operator [SEL_293] (rows=80000000 width=212)
                                          Output:["_col0","_col7"]
                                          Group By Operator [GBY_292] (rows=80000000 width=764)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                          <-Reducer 10 [SIMPLE_EDGE]
                                            SHUFFLE [RS_56]
                                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                              Group By Operator [GBY_55] (rows=80000000 width=764)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                Merge Join Operator [MERGEJOIN_255] (rows=101084444 width=764)
                                                  Conds:RS_51._col1=RS_288._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                <-Map 29 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_288]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_282]
                                                <-Reducer 9 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_51]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_254] (rows=101084444 width=115)
                                                      Conds:RS_48._col0=RS_281._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 28 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_281]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_275] (rows=652 width=4)
                                                          Output:["_col0"]
                                                          Filter Operator [FIL_271] (rows=652 width=8)
                                                            predicate:(d_year = 2001)
                                                             Please refer to the previous TableScan [TS_101]
                                                    <-Map 1 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_48]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_62] (rows=285117831 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_238] (rows=285117831 width=453)
                                                            predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                            TableScan [TS_60] (rows=287989836 width=453)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                <-Reducer 20 [SIMPLE_EDGE]
                                  SHUFFLE [RS_120]
                                    PartitionCols:_col4
                                    Merge Join Operator [MERGEJOIN_262] (rows=17130654 width=332)
                                      Conds:RS_302._col0=RS_308._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Reducer 19 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_302]
                                        PartitionCols:_col0
                                        Select Operator [SEL_301] (rows=17130654 width=220)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_300] (rows=17130654 width=212)
                                            predicate:(_col7 > 0)
                                            Select Operator [SEL_299] (rows=51391963 width=212)
                                              Output:["_col0","_col7"]
                                              Group By Operator [GBY_298] (rows=51391963 width=764)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                              <-Reducer 18 [SIMPLE_EDGE]
                                                SHUFFLE [RS_16]
                                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                  Group By Operator [GBY_15] (rows=51391963 width=764)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                    Merge Join Operator [MERGEJOIN_251] (rows=51391963 width=764)
                                                      Conds:RS_11._col1=RS_286._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_286]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_282]
                                                    <-Reducer 17 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_11]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_250] (rows=51391963 width=115)
                                                          Conds:RS_8._col0=RS_279._col0(Inner),Output:["_col1","_col2"]
                                                        <-Map 28 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_279]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_273] (rows=652 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_269] (rows=652 width=8)
                                                                predicate:(d_year = 2001)
                                                                 Please refer to the previous TableScan [TS_101]
                                                        <-Map 13 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_8]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_81]
                                    <-Reducer 27 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_308]
                                        PartitionCols:_col0
                                        Select Operator [SEL_307] (rows=26666666 width=212)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_306] (rows=26666666 width=212)
                                            predicate:(_col7 > 0)
                                            Select Operator [SEL_305] (rows=80000000 width=212)
                                              Output:["_col0","_col7"]
                                              Group By Operator [GBY_304] (rows=80000000 width=764)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                              <-Reducer 26 [SIMPLE_EDGE]
                                                SHUFFLE [RS_36]
                                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                  Group By Operator [GBY_35] (rows=80000000 width=764)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                    Merge Join Operator [MERGEJOIN_253] (rows=187573258 width=764)
                                                      Conds:RS_31._col1=RS_287._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                    <-Map 29 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_287]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_282]
                                                    <-Reducer 25 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_31]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_252] (rows=187573258 width=115)
                                                          Conds:RS_28._col0=RS_280._col0(Inner),Output:["_col1","_col2"]
                                                        <-Map 28 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_280]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_274] (rows=652 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_270] (rows=652 width=8)
                                                                predicate:(d_year = 2001)
                                                                 Please refer to the previous TableScan [TS_101]
                                                        <-Map 21 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_28]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_100]
                            <-Reducer 4 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_291]
                                PartitionCols:_col0
                                Select Operator [SEL_290] (rows=80000000 width=212)
                                  Output:["_col0","_col1"]
                                  Group By Operator [GBY_289] (rows=80000000 width=764)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_76]
                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                      Group By Operator [GBY_75] (rows=80000000 width=764)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                        Merge Join Operator [MERGEJOIN_257] (rows=101084444 width=764)
                                          Conds:RS_71._col1=RS_285._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                        <-Map 29 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_285]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_282]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_71]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_256] (rows=101084444 width=115)
                                              Conds:RS_68._col0=RS_278._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 28 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_278]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_272]
                                            <-Map 1 [SIMPLE_EDGE]
                                              SHUFFLE [RS_68]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_62]

