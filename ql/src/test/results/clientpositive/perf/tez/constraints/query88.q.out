Warning: Shuffle Join MERGEJOIN[359][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[360][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[361][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 8' is a cross product
Warning: Shuffle Join MERGEJOIN[362][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 9' is a cross product
Warning: Shuffle Join MERGEJOIN[363][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 10' is a cross product
Warning: Shuffle Join MERGEJOIN[364][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 11' is a cross product
Warning: Shuffle Join MERGEJOIN[365][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7]] in Stage 'Reducer 12' is a cross product
PREHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
PREHOOK: type: QUERY
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 27 (CUSTOM_SIMPLE_EDGE), Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE), Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 35 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 14 <- Map 36 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 35 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 17 <- Map 36 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 35 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 34 (SIMPLE_EDGE)
Reducer 20 <- Map 36 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 35 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 23 <- Map 36 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 35 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 26 <- Map 36 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 35 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 29 <- Map 36 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 35 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 35 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 32 <- Map 36 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Map 36 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 21 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 24 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 12
      File Output Operator [FS_230]
        Select Operator [SEL_229] (rows=1 width=64)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          Merge Join Operator [MERGEJOIN_365] (rows=1 width=64)
            Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_226]
              Merge Join Operator [MERGEJOIN_364] (rows=1 width=56)
                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
              <-Reducer 10 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_223]
                  Merge Join Operator [MERGEJOIN_363] (rows=1 width=48)
                    Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                  <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_417]
                      Group By Operator [GBY_416] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                      <-Reducer 26 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_153]
                          Group By Operator [GBY_152] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count()"]
                            Merge Join Operator [MERGEJOIN_352] (rows=1352994 width=8)
                              Conds:RS_148._col2=RS_403._col0(Inner)
                            <-Map 36 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_403]
                                PartitionCols:_col0
                                Select Operator [SEL_397] (rows=155 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_396] (rows=155 width=92)
                                    predicate:(s_store_name = 'ese')
                                    TableScan [TS_9] (rows=1704 width=92)
                                      default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name"]
                            <-Reducer 25 [SIMPLE_EDGE]
                              SHUFFLE [RS_148]
                                PartitionCols:_col2
                                Merge Join Operator [MERGEJOIN_351] (rows=1842898 width=0)
                                  Conds:RS_145._col0=RS_393._col0(Inner),Output:["_col2"]
                                <-Map 35 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_393]
                                    PartitionCols:_col0
                                    Select Operator [SEL_385] (rows=1515 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_377] (rows=1515 width=12)
                                        predicate:((t_hour = 10) and (t_minute < 30))
                                        TableScan [TS_6] (rows=86400 width=12)
                                          default@time_dim,time_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["t_time_sk","t_hour","t_minute"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_145]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_335] (rows=56928540 width=4)
                                      Conds:RS_368._col1=RS_371._col0(Inner),Output:["_col0","_col2"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_368]
                                        PartitionCols:_col1
                                        Select Operator [SEL_367] (rows=501695814 width=11)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_366] (rows=501695814 width=11)
                                            predicate:(ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                            TableScan [TS_0] (rows=575995635 width=11)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Map 34 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_371]
                                        PartitionCols:_col0
                                        Select Operator [SEL_370] (rows=817 width=4)
                                          Output:["_col0"]
<<<<<<< HEAD
                                          Filter Operator [FIL_369] (rows=817 width=12)
                                            predicate:((((hd_dep_count = 3) and (hd_vehicle_count <= 5)) or ((hd_dep_count = 0) and (hd_vehicle_count <= 2)) or ((hd_dep_count = 1) and (hd_vehicle_count <= 3))) and ((hd_vehicle_count <= 5) or (hd_vehicle_count <= 2) or (hd_vehicle_count <= 3)) and (hd_dep_count) IN (3, 0, 1))
                                            TableScan [TS_3] (rows=7200 width=12)
                                              default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
=======
                                          Filter Operator [FIL_659] (rows=817 width=12)
                                            predicate:((hd_dep_count) IN (3, 0, 1) and (((hd_dep_count = 3) and (hd_vehicle_count <= 5)) or ((hd_dep_count = 0) and (hd_vehicle_count <= 2)) or ((hd_dep_count = 1) and (hd_vehicle_count <= 3))) and ((hd_vehicle_count <= 5) or (hd_vehicle_count <= 2) or (hd_vehicle_count <= 3)))
                                            TableScan [TS_3] (rows=7200 width=12)
                                              default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                                    <-Map 56 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_713]
                                        PartitionCols:_col1
                                        Select Operator [SEL_712] (rows=501695814 width=11)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_711] (rows=501695814 width=11)
                                            predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_146_time_dim_t_time_sk_min) AND DynamicValue(RS_146_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_146_time_dim_t_time_sk_bloom_filter)))
                                            TableScan [TS_130] (rows=575995635 width=11)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                            <-Reducer 48 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_710]
                                                Group By Operator [GBY_709] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_651]
                                                    Group By Operator [GBY_643] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_633] (rows=1515 width=4)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_619]
>>>>>>> 18a5dcb95b... HIVE-21857: Sort conditions in a filter predicate to accelerate query processing (Jesus Camacho Rodriguez, reviewed by Vineet Garg)
                  <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_220]
                      Merge Join Operator [MERGEJOIN_362] (rows=1 width=40)
                        Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                      <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_415]
                          Group By Operator [GBY_414] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                          <-Reducer 23 [CUSTOM_SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_127]
                              Group By Operator [GBY_126] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count()"]
                                Merge Join Operator [MERGEJOIN_349] (rows=1352994 width=8)
                                  Conds:RS_122._col2=RS_402._col0(Inner)
                                <-Map 36 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_402]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_397]
                                <-Reducer 22 [SIMPLE_EDGE]
                                  SHUFFLE [RS_122]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_348] (rows=1842898 width=0)
                                      Conds:RS_119._col0=RS_392._col0(Inner),Output:["_col2"]
                                    <-Map 35 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_392]
                                        PartitionCols:_col0
                                        Select Operator [SEL_384] (rows=1515 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_376] (rows=1515 width=12)
                                            predicate:((t_hour = 10) and (t_minute >= 30))
                                             Please refer to the previous TableScan [TS_6]
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_119]
                                        PartitionCols:_col0
<<<<<<< HEAD
                                         Please refer to the previous Merge Join Operator [MERGEJOIN_335]
=======
                                        Merge Join Operator [MERGEJOIN_587] (rows=56928540 width=4)
                                          Conds:RS_706._col1=RS_665._col0(Inner),Output:["_col0","_col2"]
                                        <-Map 13 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_665]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_660]
                                        <-Map 55 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_706]
                                            PartitionCols:_col1
                                            Select Operator [SEL_705] (rows=501695814 width=11)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_704] (rows=501695814 width=11)
                                                predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_120_time_dim_t_time_sk_min) AND DynamicValue(RS_120_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_120_time_dim_t_time_sk_bloom_filter)))
                                                TableScan [TS_104] (rows=575995635 width=11)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                <-Reducer 47 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_703]
                                                    Group By Operator [GBY_702] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_650]
                                                        Group By Operator [GBY_642] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_631] (rows=1515 width=4)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_618]
>>>>>>> 18a5dcb95b... HIVE-21857: Sort conditions in a filter predicate to accelerate query processing (Jesus Camacho Rodriguez, reviewed by Vineet Garg)
                      <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_217]
                          Merge Join Operator [MERGEJOIN_361] (rows=1 width=32)
                            Conds:(Inner),Output:["_col0","_col1","_col2","_col3"]
                          <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_413]
                              Group By Operator [GBY_412] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                              <-Reducer 20 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_101]
                                  Group By Operator [GBY_100] (rows=1 width=8)
                                    Output:["_col0"],aggregations:["count()"]
                                    Merge Join Operator [MERGEJOIN_346] (rows=1352994 width=8)
                                      Conds:RS_96._col2=RS_401._col0(Inner)
                                    <-Map 36 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_401]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_397]
                                    <-Reducer 19 [SIMPLE_EDGE]
                                      SHUFFLE [RS_96]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_345] (rows=1842898 width=0)
                                          Conds:RS_93._col0=RS_391._col0(Inner),Output:["_col2"]
                                        <-Map 35 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_391]
                                            PartitionCols:_col0
                                            Select Operator [SEL_383] (rows=1515 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_375] (rows=1515 width=12)
                                                predicate:((t_hour = 11) and (t_minute < 30))
                                                 Please refer to the previous TableScan [TS_6]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_93]
                                            PartitionCols:_col0
<<<<<<< HEAD
                                             Please refer to the previous Merge Join Operator [MERGEJOIN_335]
=======
                                            Merge Join Operator [MERGEJOIN_584] (rows=56928540 width=4)
                                              Conds:RS_699._col1=RS_664._col0(Inner),Output:["_col0","_col2"]
                                            <-Map 13 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_664]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_660]
                                            <-Map 54 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_699]
                                                PartitionCols:_col1
                                                Select Operator [SEL_698] (rows=501695814 width=11)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_697] (rows=501695814 width=11)
                                                    predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_94_time_dim_t_time_sk_min) AND DynamicValue(RS_94_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_94_time_dim_t_time_sk_bloom_filter)))
                                                    TableScan [TS_78] (rows=575995635 width=11)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                    <-Reducer 46 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_696]
                                                        Group By Operator [GBY_695] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_649]
                                                            Group By Operator [GBY_641] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_629] (rows=1515 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_617]
>>>>>>> 18a5dcb95b... HIVE-21857: Sort conditions in a filter predicate to accelerate query processing (Jesus Camacho Rodriguez, reviewed by Vineet Garg)
                          <-Reducer 7 [CUSTOM_SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_214]
                              Merge Join Operator [MERGEJOIN_360] (rows=1 width=24)
                                Conds:(Inner),Output:["_col0","_col1","_col2"]
                              <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_411]
                                  Group By Operator [GBY_410] (rows=1 width=8)
                                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                  <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_75]
                                      Group By Operator [GBY_74] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Merge Join Operator [MERGEJOIN_343] (rows=1352994 width=8)
                                          Conds:RS_70._col2=RS_400._col0(Inner)
                                        <-Map 36 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_400]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_397]
                                        <-Reducer 16 [SIMPLE_EDGE]
                                          SHUFFLE [RS_70]
                                            PartitionCols:_col2
                                            Merge Join Operator [MERGEJOIN_342] (rows=1842898 width=0)
                                              Conds:RS_67._col0=RS_390._col0(Inner),Output:["_col2"]
                                            <-Map 35 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_390]
                                                PartitionCols:_col0
                                                Select Operator [SEL_382] (rows=1515 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_374] (rows=1515 width=12)
                                                    predicate:((t_hour = 11) and (t_minute >= 30))
                                                     Please refer to the previous TableScan [TS_6]
                                            <-Reducer 2 [SIMPLE_EDGE]
                                              SHUFFLE [RS_67]
                                                PartitionCols:_col0
<<<<<<< HEAD
                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_335]
=======
                                                Merge Join Operator [MERGEJOIN_581] (rows=56928540 width=4)
                                                  Conds:RS_692._col1=RS_663._col0(Inner),Output:["_col0","_col2"]
                                                <-Map 13 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_663]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_660]
                                                <-Map 53 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_692]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_691] (rows=501695814 width=11)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_690] (rows=501695814 width=11)
                                                        predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_68_time_dim_t_time_sk_min) AND DynamicValue(RS_68_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_68_time_dim_t_time_sk_bloom_filter)))
                                                        TableScan [TS_52] (rows=575995635 width=11)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                        <-Reducer 45 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_689]
                                                            Group By Operator [GBY_688] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_648]
                                                                Group By Operator [GBY_640] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_627] (rows=1515 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_616]
>>>>>>> 18a5dcb95b... HIVE-21857: Sort conditions in a filter predicate to accelerate query processing (Jesus Camacho Rodriguez, reviewed by Vineet Garg)
                              <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_211]
                                  Merge Join Operator [MERGEJOIN_359] (rows=1 width=16)
                                    Conds:(Inner),Output:["_col0","_col1"]
                                  <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_409]
                                      Group By Operator [GBY_408] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                      <-Reducer 14 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_49]
                                          Group By Operator [GBY_48] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Merge Join Operator [MERGEJOIN_340] (rows=1352994 width=8)
                                              Conds:RS_44._col2=RS_399._col0(Inner)
                                            <-Map 36 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_399]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_397]
                                            <-Reducer 13 [SIMPLE_EDGE]
                                              SHUFFLE [RS_44]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_339] (rows=1842898 width=0)
                                                  Conds:RS_41._col0=RS_389._col0(Inner),Output:["_col2"]
                                                <-Map 35 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_389]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_381] (rows=1515 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_373] (rows=1515 width=12)
                                                        predicate:((t_hour = 12) and (t_minute < 30))
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_41]
                                                    PartitionCols:_col0
<<<<<<< HEAD
                                                     Please refer to the previous Merge Join Operator [MERGEJOIN_335]
=======
                                                    Merge Join Operator [MERGEJOIN_578] (rows=56928540 width=4)
                                                      Conds:RS_685._col1=RS_662._col0(Inner),Output:["_col0","_col2"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_662]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_660]
                                                    <-Map 52 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_685]
                                                        PartitionCols:_col1
                                                        Select Operator [SEL_684] (rows=501695814 width=11)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_683] (rows=501695814 width=11)
                                                            predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_42_time_dim_t_time_sk_min) AND DynamicValue(RS_42_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_42_time_dim_t_time_sk_bloom_filter)))
                                                            TableScan [TS_26] (rows=575995635 width=11)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                            <-Reducer 44 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_682]
                                                                Group By Operator [GBY_681] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_647]
                                                                    Group By Operator [GBY_639] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_625] (rows=1515 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_615]
>>>>>>> 18a5dcb95b... HIVE-21857: Sort conditions in a filter predicate to accelerate query processing (Jesus Camacho Rodriguez, reviewed by Vineet Garg)
                                  <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_407]
                                      Group By Operator [GBY_406] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                      <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_23]
                                          Group By Operator [GBY_22] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Merge Join Operator [MERGEJOIN_337] (rows=1352994 width=8)
                                              Conds:RS_18._col2=RS_398._col0(Inner)
                                            <-Map 36 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_398]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_397]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_18]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_336] (rows=1842898 width=0)
                                                  Conds:RS_15._col0=RS_388._col0(Inner),Output:["_col2"]
                                                <-Map 35 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_388]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_380] (rows=1515 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_372] (rows=1515 width=12)
                                                        predicate:((t_hour = 8) and (t_minute >= 30))
                                                         Please refer to the previous TableScan [TS_6]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_15]
                                                    PartitionCols:_col0
<<<<<<< HEAD
                                                     Please refer to the previous Merge Join Operator [MERGEJOIN_335]
              <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                PARTITION_ONLY_SHUFFLE [RS_419]
                  Group By Operator [GBY_418] (rows=1 width=8)
=======
                                                    Merge Join Operator [MERGEJOIN_575] (rows=56928540 width=4)
                                                      Conds:RS_658._col1=RS_661._col0(Inner),Output:["_col0","_col2"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_661]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_660]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_658]
                                                        PartitionCols:_col1
                                                        Select Operator [SEL_657] (rows=501695814 width=11)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_656] (rows=501695814 width=11)
                                                            predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_16_time_dim_t_time_sk_min) AND DynamicValue(RS_16_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_16_time_dim_t_time_sk_bloom_filter)))
                                                            TableScan [TS_0] (rows=575995635 width=11)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                            <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_655]
                                                                Group By Operator [GBY_654] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_646]
                                                                    Group By Operator [GBY_638] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_623] (rows=1515 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_614]
              <-Reducer 37 [CUSTOM_SIMPLE_EDGE] vectorized
                PARTITION_ONLY_SHUFFLE [RS_722]
                  Group By Operator [GBY_721] (rows=1 width=8)
>>>>>>> 18a5dcb95b... HIVE-21857: Sort conditions in a filter predicate to accelerate query processing (Jesus Camacho Rodriguez, reviewed by Vineet Garg)
                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                  <-Reducer 29 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_179]
                      Group By Operator [GBY_178] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count()"]
                        Merge Join Operator [MERGEJOIN_355] (rows=1352994 width=8)
                          Conds:RS_174._col2=RS_404._col0(Inner)
                        <-Map 36 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_404]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_397]
                        <-Reducer 28 [SIMPLE_EDGE]
                          SHUFFLE [RS_174]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_354] (rows=1842898 width=0)
                              Conds:RS_171._col0=RS_394._col0(Inner),Output:["_col2"]
                            <-Map 35 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_394]
                                PartitionCols:_col0
                                Select Operator [SEL_386] (rows=1515 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_378] (rows=1515 width=12)
                                    predicate:((t_hour = 9) and (t_minute >= 30))
                                     Please refer to the previous TableScan [TS_6]
                            <-Reducer 2 [SIMPLE_EDGE]
                              SHUFFLE [RS_171]
                                PartitionCols:_col0
<<<<<<< HEAD
                                 Please refer to the previous Merge Join Operator [MERGEJOIN_335]
          <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_421]
              Group By Operator [GBY_420] (rows=1 width=8)
=======
                                Merge Join Operator [MERGEJOIN_593] (rows=56928540 width=4)
                                  Conds:RS_720._col1=RS_667._col0(Inner),Output:["_col0","_col2"]
                                <-Map 13 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_667]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_660]
                                <-Map 57 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_720]
                                    PartitionCols:_col1
                                    Select Operator [SEL_719] (rows=501695814 width=11)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_718] (rows=501695814 width=11)
                                        predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_172_time_dim_t_time_sk_min) AND DynamicValue(RS_172_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_172_time_dim_t_time_sk_bloom_filter)))
                                        TableScan [TS_156] (rows=575995635 width=11)
                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                        <-Reducer 49 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_717]
                                            Group By Operator [GBY_716] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                            <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_652]
                                                Group By Operator [GBY_644] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                  Select Operator [SEL_635] (rows=1515 width=4)
                                                    Output:["_col0"]
                                                     Please refer to the previous Select Operator [SEL_620]
          <-Reducer 41 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_729]
              Group By Operator [GBY_728] (rows=1 width=8)
>>>>>>> 18a5dcb95b... HIVE-21857: Sort conditions in a filter predicate to accelerate query processing (Jesus Camacho Rodriguez, reviewed by Vineet Garg)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 32 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_205]
                  Group By Operator [GBY_204] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_358] (rows=1352994 width=8)
                      Conds:RS_200._col2=RS_405._col0(Inner)
                    <-Map 36 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_405]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_397]
                    <-Reducer 31 [SIMPLE_EDGE]
                      SHUFFLE [RS_200]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_357] (rows=1842898 width=0)
                          Conds:RS_197._col0=RS_395._col0(Inner),Output:["_col2"]
                        <-Map 35 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_395]
                            PartitionCols:_col0
                            Select Operator [SEL_387] (rows=1515 width=4)
                              Output:["_col0"]
                              Filter Operator [FIL_379] (rows=1515 width=12)
                                predicate:((t_hour = 9) and (t_minute < 30))
                                 Please refer to the previous TableScan [TS_6]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_197]
                            PartitionCols:_col0
<<<<<<< HEAD
                             Please refer to the previous Merge Join Operator [MERGEJOIN_335]
=======
                            Merge Join Operator [MERGEJOIN_596] (rows=56928540 width=4)
                              Conds:RS_727._col1=RS_668._col0(Inner),Output:["_col0","_col2"]
                            <-Map 13 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_668]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_660]
                            <-Map 58 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_727]
                                PartitionCols:_col1
                                Select Operator [SEL_726] (rows=501695814 width=11)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_725] (rows=501695814 width=11)
                                    predicate:(ss_sold_time_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_sold_time_sk BETWEEN DynamicValue(RS_198_time_dim_t_time_sk_min) AND DynamicValue(RS_198_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_198_time_dim_t_time_sk_bloom_filter)))
                                    TableScan [TS_182] (rows=575995635 width=11)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                    <-Reducer 50 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_724]
                                        Group By Operator [GBY_723] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 42 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_653]
                                            Group By Operator [GBY_645] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_637] (rows=1515 width=4)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_621]
>>>>>>> 18a5dcb95b... HIVE-21857: Sort conditions in a filter predicate to accelerate query processing (Jesus Camacho Rodriguez, reviewed by Vineet Garg)

