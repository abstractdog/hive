Warning: Shuffle Join MERGEJOIN[887][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[899][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[889][tables = [$hdt$_1, $hdt$_2]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[911][tables = [$hdt$_1, $hdt$_2, $hdt$_0]] in Stage 'Reducer 14' is a cross product
Warning: Shuffle Join MERGEJOIN[891][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 18' is a cross product
Warning: Shuffle Join MERGEJOIN[923][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 19' is a cross product
PREHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect 
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001 
       union all 
       select cs_quantity quantity 
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2 
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2 
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 12 <- Union 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 57 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 15 <- Map 1 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 17 <- Union 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 61 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 21 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 23 <- Map 20 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 25 <- Map 24 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 27 <- Union 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 24 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 30 <- Union 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 24 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 33 <- Union 32 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 36 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE), Union 11 (CONTAINS)
Reducer 37 <- Map 34 (SIMPLE_EDGE), Map 38 (SIMPLE_EDGE), Union 16 (CONTAINS)
Reducer 39 <- Map 38 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 4 <- Union 3 (CUSTOM_SIMPLE_EDGE)
Reducer 40 <- Map 38 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 41 <- Map 38 (SIMPLE_EDGE), Map 47 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 43 <- Map 42 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE), Union 26 (CONTAINS)
Reducer 44 <- Map 42 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE), Union 29 (CONTAINS)
Reducer 45 <- Map 42 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE), Union 32 (CONTAINS)
Reducer 49 <- Map 48 (SIMPLE_EDGE), Map 53 (SIMPLE_EDGE)
Reducer 5 <- Reducer 27 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 50 <- Map 62 (SIMPLE_EDGE), Reducer 49 (SIMPLE_EDGE)
Reducer 51 <- Reducer 50 (SIMPLE_EDGE), Reducer 64 (SIMPLE_EDGE)
Reducer 52 <- Reducer 51 (SIMPLE_EDGE)
Reducer 54 <- Map 53 (SIMPLE_EDGE), Map 97 (SIMPLE_EDGE)
Reducer 55 <- Map 62 (SIMPLE_EDGE), Reducer 54 (SIMPLE_EDGE)
Reducer 56 <- Reducer 55 (SIMPLE_EDGE), Reducer 74 (SIMPLE_EDGE)
Reducer 57 <- Reducer 56 (SIMPLE_EDGE)
Reducer 58 <- Map 53 (SIMPLE_EDGE), Map 98 (SIMPLE_EDGE)
Reducer 59 <- Map 62 (SIMPLE_EDGE), Reducer 58 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE), Reducer 52 (CUSTOM_SIMPLE_EDGE), Union 7 (CONTAINS)
Reducer 60 <- Reducer 59 (SIMPLE_EDGE), Reducer 83 (SIMPLE_EDGE)
Reducer 61 <- Reducer 60 (SIMPLE_EDGE)
Reducer 63 <- Map 62 (SIMPLE_EDGE), Reducer 68 (SIMPLE_EDGE)
Reducer 64 <- Reducer 63 (SIMPLE_EDGE)
Reducer 65 <- Map 62 (SIMPLE_EDGE), Reducer 91 (SIMPLE_EDGE)
Reducer 66 <- Reducer 65 (SIMPLE_EDGE), Union 67 (CONTAINS)
Reducer 68 <- Union 67 (SIMPLE_EDGE)
Reducer 69 <- Map 62 (SIMPLE_EDGE), Reducer 93 (SIMPLE_EDGE)
Reducer 70 <- Reducer 69 (SIMPLE_EDGE), Union 67 (CONTAINS)
Reducer 71 <- Map 62 (SIMPLE_EDGE), Reducer 94 (SIMPLE_EDGE)
Reducer 72 <- Reducer 71 (SIMPLE_EDGE), Union 67 (CONTAINS)
Reducer 73 <- Map 62 (SIMPLE_EDGE), Reducer 78 (SIMPLE_EDGE)
Reducer 74 <- Reducer 73 (SIMPLE_EDGE)
Reducer 75 <- Map 62 (SIMPLE_EDGE), Reducer 91 (SIMPLE_EDGE)
Reducer 76 <- Reducer 75 (SIMPLE_EDGE), Union 77 (CONTAINS)
Reducer 78 <- Union 77 (SIMPLE_EDGE)
Reducer 79 <- Reducer 75 (SIMPLE_EDGE), Union 80 (CONTAINS)
Reducer 8 <- Union 7 (SIMPLE_EDGE)
Reducer 81 <- Union 80 (SIMPLE_EDGE)
Reducer 82 <- Map 62 (SIMPLE_EDGE), Reducer 81 (SIMPLE_EDGE)
Reducer 83 <- Reducer 82 (SIMPLE_EDGE)
Reducer 84 <- Map 62 (SIMPLE_EDGE), Reducer 93 (SIMPLE_EDGE)
Reducer 85 <- Reducer 84 (SIMPLE_EDGE), Union 77 (CONTAINS)
Reducer 86 <- Reducer 84 (SIMPLE_EDGE), Union 80 (CONTAINS)
Reducer 87 <- Map 62 (SIMPLE_EDGE), Reducer 94 (SIMPLE_EDGE)
Reducer 88 <- Reducer 87 (SIMPLE_EDGE), Union 77 (CONTAINS)
Reducer 89 <- Reducer 87 (SIMPLE_EDGE), Union 80 (CONTAINS)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)
Reducer 91 <- Map 90 (SIMPLE_EDGE), Map 92 (SIMPLE_EDGE)
Reducer 93 <- Map 92 (SIMPLE_EDGE), Map 95 (SIMPLE_EDGE)
Reducer 94 <- Map 92 (SIMPLE_EDGE), Map 96 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_1133]
        Limit [LIM_1132] (rows=7 width=212)
          Number of rows:100
          Select Operator [SEL_1131] (rows=7 width=212)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 8 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_1130]
              Select Operator [SEL_1129] (rows=7 width=212)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Group By Operator [GBY_1128] (rows=7 width=220)
                  Output:["_col0","_col1","_col2","_col3","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
                <-Union 7 [SIMPLE_EDGE]
                  <-Reducer 14 [CONTAINS]
                    Reduce Output Operator [RS_916]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_915] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_913] (rows=1 width=223)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_912] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_911] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_387]
                                Merge Join Operator [MERGEJOIN_889] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1139]
                                    Select Operator [SEL_1138] (rows=1 width=8)
                                      Filter Operator [FIL_1137] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1136] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1135] (rows=1 width=8)
                                            Group By Operator [GBY_1134] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 11 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 10 [CONTAINS]
                                                Reduce Output Operator [RS_910]
                                                  Group By Operator [GBY_909] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_908] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_906] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_905] (rows=14736682 width=0)
                                                          Conds:RS_1058._col0=RS_1067._col0(Inner),Output:["_col1"]
                                                        <-Map 92 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1067]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1061] (rows=1957 width=8)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1060] (rows=1957 width=8)
                                                                predicate:(d_date_sk is not null and d_year BETWEEN 1999 AND 2001)
                                                                TableScan [TS_99] (rows=73049 width=8)
                                                                  default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1058]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1056] (rows=550076554 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1055] (rows=550076554 width=7)
                                                                predicate:ss_sold_date_sk is not null
                                                                TableScan [TS_0] (rows=575995635 width=7)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity"]
                                              <-Reducer 22 [CONTAINS]
                                                Reduce Output Operator [RS_940]
                                                  Group By Operator [GBY_939] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_938] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_936] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_935] (rows=7676736 width=3)
                                                          Conds:RS_1181._col0=RS_1187._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1187]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1184] (rows=1957 width=8)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1183] (rows=1957 width=8)
                                                                predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                                TableScan [TS_13] (rows=73049 width=8)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1181]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1179] (rows=286549727 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1178] (rows=286549727 width=7)
                                                                predicate:cs_sold_date_sk is not null
                                                                TableScan [TS_10] (rows=287989836 width=7)
                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity"]
                                              <-Reducer 36 [CONTAINS]
                                                Reduce Output Operator [RS_976]
                                                  Group By Operator [GBY_975] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_974] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_972] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_971] (rows=3856907 width=3)
                                                          Conds:RS_1199._col0=RS_1205._col0(Inner),Output:["_col1"]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1205]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1202] (rows=1957 width=8)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1201] (rows=1957 width=8)
                                                                predicate:(d_date_sk is not null and d_year BETWEEN 1998 AND 2000)
                                                                TableScan [TS_24] (rows=73049 width=8)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1199]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1197] (rows=143966864 width=7)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1196] (rows=143966864 width=7)
                                                                predicate:ws_sold_date_sk is not null
                                                                TableScan [TS_21] (rows=144002668 width=7)
                                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity"]
                                <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1143]
                                    Select Operator [SEL_1142] (rows=1 width=112)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1141] (rows=1 width=120)
                                        predicate:(_col0 is not null and _col1 is not null)
                                        Group By Operator [GBY_1140] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 29 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 28 [CONTAINS]
                                            Reduce Output Operator [RS_958]
                                              Group By Operator [GBY_957] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_956] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_954] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_953] (rows=7676736 width=94)
                                                      Conds:RS_1194._col0=RS_1188._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1188]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1184]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1194]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1192] (rows=286549727 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1191] (rows=286549727 width=119)
                                                            predicate:cs_sold_date_sk is not null
                                                            TableScan [TS_55] (rows=287989836 width=119)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_quantity","cs_list_price"]
                                          <-Reducer 40 [CONTAINS]
                                            Reduce Output Operator [RS_994]
                                              Group By Operator [GBY_993] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_992] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_990] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_989] (rows=3856907 width=114)
                                                      Conds:RS_1212._col0=RS_1206._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1206]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1202]
                                                    <-Map 47 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1212]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1210] (rows=143966864 width=119)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1209] (rows=143966864 width=119)
                                                            predicate:ws_sold_date_sk is not null
                                                            TableScan [TS_66] (rows=144002668 width=119)
                                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_quantity","ws_list_price"]
                                          <-Reducer 44 [CONTAINS]
                                            Reduce Output Operator [RS_1012]
                                              Group By Operator [GBY_1011] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1010] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1008] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1007] (rows=14736682 width=0)
                                                      Conds:RS_1217._col0=RS_1068._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 92 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1068]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1061]
                                                    <-Map 42 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1217]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_1215] (rows=550076554 width=114)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1214] (rows=550076554 width=114)
                                                            predicate:ss_sold_date_sk is not null
                                                            TableScan [TS_45] (rows=575995635 width=114)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_quantity","ss_list_price"]
                            <-Reducer 57 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1155]
                                Filter Operator [FIL_1154] (rows=1 width=132)
                                  predicate:_col3 is not null
                                  Group By Operator [GBY_1153] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 56 [SIMPLE_EDGE]
                                    SHUFFLE [RS_380]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_379] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_377] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_885] (rows=1 width=128)
                                            Conds:RS_374._col1=RS_1152._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Reducer 55 [SIMPLE_EDGE]
                                            SHUFFLE [RS_374]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_861] (rows=7790806 width=110)
                                                Conds:RS_371._col1=RS_1116._col0(Inner),Output:["_col1","_col2","_col3","_col8","_col9","_col10"]
                                              <-Map 62 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1116]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1104] (rows=462000 width=15)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1095] (rows=462000 width=15)
                                                      predicate:i_item_sk is not null
                                                      TableScan [TS_93] (rows=462000 width=15)
                                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id"]
                                              <-Reducer 54 [SIMPLE_EDGE]
                                                SHUFFLE [RS_371]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_860] (rows=7790806 width=98)
                                                    Conds:RS_1146._col0=RS_1087._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 53 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1087]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1085] (rows=50 width=12)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_1084] (rows=50 width=12)
                                                          predicate:((d_moy = 11) and (d_year = 2000) and d_date_sk is not null)
                                                          TableScan [TS_87] (rows=73049 width=12)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                  <-Map 97 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1146]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1145] (rows=286549727 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1144] (rows=286549727 width=123)
                                                          predicate:(cs_item_sk is not null and cs_sold_date_sk is not null)
                                                          TableScan [TS_280] (rows=287989836 width=123)
                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                          <-Reducer 74 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1152]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1151] (rows=362 width=4)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 73 [SIMPLE_EDGE]
                                                SHUFFLE [RS_365]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_364] (rows=362 width=4)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_868] (rows=724 width=4)
                                                      Conds:RS_1112._col1, _col2, _col3=RS_1150._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 62 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1112]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1100] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1091] (rows=458612 width=15)
                                                            predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                             Please refer to the previous TableScan [TS_93]
                                                    <-Reducer 78 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1150]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1149] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1148] (rows=1 width=20)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1147] (rows=121728 width=19)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 77 [SIMPLE_EDGE]
                                                              <-Reducer 76 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1239]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1238] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1237] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 75 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_309]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_308] (rows=121728 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_863] (rows=14628613 width=11)
                                                                            Conds:RS_304._col1=RS_1113._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 62 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1113]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1101] (rows=458612 width=15)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1092] (rows=458612 width=15)
                                                                                  predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                   Please refer to the previous TableScan [TS_93]
                                                                          <-Reducer 91 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_304]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_847] (rows=14736682 width=4)
                                                                                Conds:RS_1221._col0=RS_1062._col0(Inner),Output:["_col1"]
                                                                              <-Map 92 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1062]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1061]
                                                                              <-Map 90 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1221]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1220] (rows=550076554 width=7)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1219] (rows=550076554 width=7)
                                                                                      predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                                                      TableScan [TS_96] (rows=575995635 width=7)
                                                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                              <-Reducer 85 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1245]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1244] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1243] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 84 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_329]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_328] (rows=121728 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_865] (rows=7620440 width=11)
                                                                            Conds:RS_324._col1=RS_1114._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 62 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1114]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1102] (rows=458612 width=15)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1093] (rows=458612 width=15)
                                                                                  predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                   Please refer to the previous TableScan [TS_93]
                                                                          <-Reducer 93 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_324]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_849] (rows=7676736 width=4)
                                                                                Conds:RS_1227._col0=RS_1063._col0(Inner),Output:["_col1"]
                                                                              <-Map 92 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1063]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1061]
                                                                              <-Map 95 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1227]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1226] (rows=286549727 width=7)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1225] (rows=286549727 width=7)
                                                                                      predicate:(cs_item_sk is not null and cs_sold_date_sk is not null)
                                                                                      TableScan [TS_116] (rows=287989836 width=7)
                                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk"]
                                                              <-Reducer 88 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1251]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1250] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1249] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 87 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_350]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_349] (rows=121728 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_867] (rows=3828623 width=11)
                                                                            Conds:RS_345._col1=RS_1115._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 62 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1115]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_1103] (rows=458612 width=15)
                                                                                Output:["_col0","_col1","_col2","_col3"]
                                                                                Filter Operator [FIL_1094] (rows=458612 width=15)
                                                                                  predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                                                   Please refer to the previous TableScan [TS_93]
                                                                          <-Reducer 94 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_345]
                                                                              PartitionCols:_col1
                                                                              Merge Join Operator [MERGEJOIN_851] (rows=3856907 width=4)
                                                                                Conds:RS_1233._col0=RS_1064._col0(Inner),Output:["_col1"]
                                                                              <-Map 92 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1064]
                                                                                  PartitionCols:_col0
                                                                                   Please refer to the previous Select Operator [SEL_1061]
                                                                              <-Map 96 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_1233]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_1232] (rows=143966864 width=7)
                                                                                    Output:["_col0","_col1"]
                                                                                    Filter Operator [FIL_1231] (rows=143966864 width=7)
                                                                                      predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                                                                      TableScan [TS_137] (rows=144002668 width=7)
                                                                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk"]
                  <-Reducer 19 [CONTAINS]
                    Reduce Output Operator [RS_928]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_927] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_925] (rows=1 width=219)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_924] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_923] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 18 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_584]
                                Merge Join Operator [MERGEJOIN_891] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1161]
                                    Select Operator [SEL_1160] (rows=1 width=8)
                                      Filter Operator [FIL_1159] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1158] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1157] (rows=1 width=8)
                                            Group By Operator [GBY_1156] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 16 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 15 [CONTAINS]
                                                Reduce Output Operator [RS_922]
                                                  Group By Operator [GBY_921] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_920] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_918] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_917] (rows=14736682 width=0)
                                                          Conds:RS_1059._col0=RS_1069._col0(Inner),Output:["_col1"]
                                                        <-Map 92 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1069]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1061]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1059]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1056]
                                              <-Reducer 23 [CONTAINS]
                                                Reduce Output Operator [RS_946]
                                                  Group By Operator [GBY_945] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_944] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_942] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_941] (rows=7676736 width=3)
                                                          Conds:RS_1182._col0=RS_1189._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1189]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1184]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1182]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1179]
                                              <-Reducer 37 [CONTAINS]
                                                Reduce Output Operator [RS_982]
                                                  Group By Operator [GBY_981] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_980] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_978] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_977] (rows=3856907 width=3)
                                                          Conds:RS_1200._col0=RS_1207._col0(Inner),Output:["_col1"]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1207]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1202]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1200]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1197]
                                <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1165]
                                    Select Operator [SEL_1164] (rows=1 width=112)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1163] (rows=1 width=120)
                                        predicate:(_col0 is not null and _col1 is not null)
                                        Group By Operator [GBY_1162] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 32 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 31 [CONTAINS]
                                            Reduce Output Operator [RS_964]
                                              Group By Operator [GBY_963] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_962] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_960] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_959] (rows=7676736 width=94)
                                                      Conds:RS_1195._col0=RS_1190._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1190]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1184]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1195]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1192]
                                          <-Reducer 41 [CONTAINS]
                                            Reduce Output Operator [RS_1000]
                                              Group By Operator [GBY_999] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_998] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_996] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_995] (rows=3856907 width=114)
                                                      Conds:RS_1213._col0=RS_1208._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1208]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1202]
                                                    <-Map 47 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1213]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1210]
                                          <-Reducer 45 [CONTAINS]
                                            Reduce Output Operator [RS_1018]
                                              Group By Operator [GBY_1017] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1016] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1014] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1013] (rows=14736682 width=0)
                                                      Conds:RS_1218._col0=RS_1070._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 92 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1070]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1061]
                                                    <-Map 42 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1218]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1215]
                            <-Reducer 61 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1177]
                                Filter Operator [FIL_1176] (rows=1 width=132)
                                  predicate:_col3 is not null
                                  Group By Operator [GBY_1175] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 60 [SIMPLE_EDGE]
                                    SHUFFLE [RS_577]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_576] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_574] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_886] (rows=1 width=128)
                                            Conds:RS_571._col1=RS_1174._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Reducer 59 [SIMPLE_EDGE]
                                            SHUFFLE [RS_571]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_876] (rows=3942084 width=130)
                                                Conds:RS_568._col1=RS_1118._col0(Inner),Output:["_col1","_col2","_col3","_col8","_col9","_col10"]
                                              <-Map 62 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1118]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1106] (rows=462000 width=15)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1097] (rows=462000 width=15)
                                                      predicate:i_item_sk is not null
                                                       Please refer to the previous TableScan [TS_93]
                                              <-Reducer 58 [SIMPLE_EDGE]
                                                SHUFFLE [RS_568]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_875] (rows=3942084 width=118)
                                                    Conds:RS_1168._col0=RS_1088._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 53 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1088]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1085]
                                                  <-Map 98 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1168]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1167] (rows=143966864 width=123)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1166] (rows=143966864 width=123)
                                                          predicate:(ws_item_sk is not null and ws_sold_date_sk is not null)
                                                          TableScan [TS_477] (rows=144002668 width=123)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_quantity","ws_list_price"]
                                          <-Reducer 83 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1174]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1173] (rows=362 width=4)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 82 [SIMPLE_EDGE]
                                                SHUFFLE [RS_562]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_561] (rows=362 width=4)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_883] (rows=724 width=4)
                                                      Conds:RS_1117._col1, _col2, _col3=RS_1172._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 62 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1117]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1105] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1096] (rows=458612 width=15)
                                                            predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                             Please refer to the previous TableScan [TS_93]
                                                    <-Reducer 81 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1172]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1171] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1170] (rows=1 width=20)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1169] (rows=121728 width=19)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 80 [SIMPLE_EDGE]
                                                              <-Reducer 79 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1242]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1241] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1240] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 75 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_506]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_308]
                                                              <-Reducer 86 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1248]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1247] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1246] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 84 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_526]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_328]
                                                              <-Reducer 89 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1254]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1253] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1252] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 87 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_547]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                         Please refer to the previous Group By Operator [GBY_349]
                  <-Reducer 6 [CONTAINS]
                    Reduce Output Operator [RS_904]
                      PartitionCols:_col0, _col1, _col2, _col3, _col4
                      Group By Operator [GBY_903] (rows=7 width=220)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3, 0L
                        Select Operator [SEL_901] (rows=1 width=221)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Filter Operator [FIL_900] (rows=1 width=244)
                            predicate:(_col5 > _col1)
                            Merge Join Operator [MERGEJOIN_899] (rows=1 width=244)
                              Conds:(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                              PARTITION_ONLY_SHUFFLE [RS_191]
                                Merge Join Operator [MERGEJOIN_887] (rows=1 width=112)
                                  Conds:(Inner),Output:["_col1"]
                                <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1080]
                                    Select Operator [SEL_1079] (rows=1 width=112)
                                      Output:["_col0"]
                                      Filter Operator [FIL_1078] (rows=1 width=120)
                                        predicate:(_col0 is not null and _col1 is not null)
                                        Group By Operator [GBY_1077] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Union 26 [CUSTOM_SIMPLE_EDGE]
                                          <-Reducer 25 [CONTAINS]
                                            Reduce Output Operator [RS_952]
                                              Group By Operator [GBY_951] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_950] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_948] (rows=7676736 width=94)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_947] (rows=7676736 width=94)
                                                      Conds:RS_1193._col0=RS_1186._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1186]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1184]
                                                    <-Map 46 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1193]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1192]
                                          <-Reducer 39 [CONTAINS]
                                            Reduce Output Operator [RS_988]
                                              Group By Operator [GBY_987] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_986] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_984] (rows=3856907 width=114)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_983] (rows=3856907 width=114)
                                                      Conds:RS_1211._col0=RS_1204._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1204]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1202]
                                                    <-Map 47 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1211]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1210]
                                          <-Reducer 43 [CONTAINS]
                                            Reduce Output Operator [RS_1006]
                                              Group By Operator [GBY_1005] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(_col0)","count(_col0)"]
                                                Select Operator [SEL_1004] (rows=26270325 width=44)
                                                  Output:["_col0"]
                                                  Select Operator [SEL_1002] (rows=14736682 width=0)
                                                    Output:["_col0","_col1"]
                                                    Merge Join Operator [MERGEJOIN_1001] (rows=14736682 width=0)
                                                      Conds:RS_1216._col0=RS_1066._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 92 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1066]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1061]
                                                    <-Map 42 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1216]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_1215]
                                <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_1076]
                                    Select Operator [SEL_1075] (rows=1 width=8)
                                      Filter Operator [FIL_1074] (rows=1 width=8)
                                        predicate:(sq_count_check(_col0) <= 1)
                                        Group By Operator [GBY_1073] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count()"]
                                          Select Operator [SEL_1072] (rows=1 width=8)
                                            Group By Operator [GBY_1071] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Union 3 [CUSTOM_SIMPLE_EDGE]
                                              <-Reducer 2 [CONTAINS]
                                                Reduce Output Operator [RS_898]
                                                  Group By Operator [GBY_897] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_896] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_894] (rows=14736682 width=0)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_893] (rows=14736682 width=0)
                                                          Conds:RS_1057._col0=RS_1065._col0(Inner),Output:["_col1"]
                                                        <-Map 92 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1065]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1061]
                                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1057]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1056]
                                              <-Reducer 21 [CONTAINS]
                                                Reduce Output Operator [RS_934]
                                                  Group By Operator [GBY_933] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_932] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_930] (rows=7676736 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_929] (rows=7676736 width=3)
                                                          Conds:RS_1180._col0=RS_1185._col0(Inner),Output:["_col1"]
                                                        <-Map 24 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1185]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1184]
                                                        <-Map 20 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1180]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1179]
                                              <-Reducer 35 [CONTAINS]
                                                Reduce Output Operator [RS_970]
                                                  Group By Operator [GBY_969] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(_col0)"]
                                                    Select Operator [SEL_968] (rows=26270325 width=1)
                                                      Output:["_col0"]
                                                      Select Operator [SEL_966] (rows=3856907 width=3)
                                                        Output:["_col0"]
                                                        Merge Join Operator [MERGEJOIN_965] (rows=3856907 width=3)
                                                          Conds:RS_1198._col0=RS_1203._col0(Inner),Output:["_col1"]
                                                        <-Map 38 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1203]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1202]
                                                        <-Map 34 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1198]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_1197]
                            <-Reducer 52 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_1127]
                                Filter Operator [FIL_1126] (rows=1 width=132)
                                  predicate:_col3 is not null
                                  Group By Operator [GBY_1125] (rows=1 width=132)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 51 [SIMPLE_EDGE]
                                    SHUFFLE [RS_184]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_183] (rows=1 width=132)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","count()"],keys:_col0, _col1, _col2
                                        Select Operator [SEL_181] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Merge Join Operator [MERGEJOIN_884] (rows=1 width=128)
                                            Conds:RS_178._col1=RS_1124._col0(Inner),Output:["_col2","_col3","_col8","_col9","_col10"]
                                          <-Reducer 50 [SIMPLE_EDGE]
                                            SHUFFLE [RS_178]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_846] (rows=15062131 width=15)
                                                Conds:RS_175._col1=RS_1111._col0(Inner),Output:["_col1","_col2","_col3","_col8","_col9","_col10"]
                                              <-Map 62 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1111]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_1099] (rows=462000 width=15)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    Filter Operator [FIL_1090] (rows=462000 width=15)
                                                      predicate:i_item_sk is not null
                                                       Please refer to the previous TableScan [TS_93]
                                              <-Reducer 49 [SIMPLE_EDGE]
                                                SHUFFLE [RS_175]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_845] (rows=15062131 width=4)
                                                    Conds:RS_1083._col0=RS_1086._col0(Inner),Output:["_col1","_col2","_col3"]
                                                  <-Map 53 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1086]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1085]
                                                  <-Map 48 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1083]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_1082] (rows=550076554 width=118)
                                                        Output:["_col0","_col1","_col2","_col3"]
                                                        Filter Operator [FIL_1081] (rows=550076554 width=118)
                                                          predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                          TableScan [TS_84] (rows=575995635 width=118)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_quantity","ss_list_price"]
                                          <-Reducer 64 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_1124]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_1123] (rows=362 width=4)
                                                Output:["_col0"],keys:KEY._col0
                                              <-Reducer 63 [SIMPLE_EDGE]
                                                SHUFFLE [RS_169]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_168] (rows=362 width=4)
                                                    Output:["_col0"],keys:_col0
                                                    Merge Join Operator [MERGEJOIN_853] (rows=724 width=4)
                                                      Conds:RS_1107._col1, _col2, _col3=RS_1122._col0, _col1, _col2(Inner),Output:["_col0"]
                                                    <-Map 62 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1107]
                                                        PartitionCols:_col1, _col2, _col3
                                                        Select Operator [SEL_1098] (rows=458612 width=15)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_1089] (rows=458612 width=15)
                                                            predicate:(i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_item_sk is not null)
                                                             Please refer to the previous TableScan [TS_93]
                                                    <-Reducer 68 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_1122]
                                                        PartitionCols:_col0, _col1, _col2
                                                        Select Operator [SEL_1121] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_1120] (rows=1 width=20)
                                                            predicate:(_col3 = 3L)
                                                            Group By Operator [GBY_1119] (rows=121728 width=19)
                                                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                            <-Union 67 [SIMPLE_EDGE]
                                                              <-Reducer 66 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1224]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1223] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1222] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 65 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_113]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_112] (rows=121728 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_848] (rows=14628613 width=11)
                                                                            Conds:RS_108._col1=RS_1108._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 62 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1108]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1098]
                                                                          <-Reducer 91 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_108]
                                                                              PartitionCols:_col1
                                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_847]
                                                              <-Reducer 70 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1230]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1229] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1228] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 69 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_133]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_132] (rows=121728 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_850] (rows=7620440 width=11)
                                                                            Conds:RS_128._col1=RS_1109._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 62 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1109]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1098]
                                                                          <-Reducer 93 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_128]
                                                                              PartitionCols:_col1
                                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_849]
                                                              <-Reducer 72 [CONTAINS] vectorized
                                                                Reduce Output Operator [RS_1236]
                                                                  PartitionCols:_col0, _col1, _col2
                                                                  Group By Operator [GBY_1235] (rows=121728 width=19)
                                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                                                                    Group By Operator [GBY_1234] (rows=121728 width=19)
                                                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                                                    <-Reducer 71 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_154]
                                                                        PartitionCols:_col0, _col1, _col2
                                                                        Group By Operator [GBY_153] (rows=121728 width=19)
                                                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col5, _col6, _col7
                                                                          Merge Join Operator [MERGEJOIN_852] (rows=3828623 width=11)
                                                                            Conds:RS_149._col1=RS_1110._col0(Inner),Output:["_col5","_col6","_col7"]
                                                                          <-Map 62 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1110]
                                                                              PartitionCols:_col0
                                                                               Please refer to the previous Select Operator [SEL_1098]
                                                                          <-Reducer 94 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_149]
                                                                              PartitionCols:_col1
                                                                               Please refer to the previous Merge Join Operator [MERGEJOIN_851]

