Warning: Shuffle Join MERGEJOIN[159][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_current_addr_sk = ca_address_sk
  and c_birth_country <> upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_current_addr_sk = ca_address_sk
  and c_birth_country <> upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 15 <- Map 17 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 3 <- Reducer 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 18 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 11 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 8 <- Map 12 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 18 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6
      File Output Operator [FS_98]
        Select Operator [SEL_97] (rows=1313165 width=380)
          Output:["_col0","_col1","_col2","_col3"]
          Filter Operator [FIL_96] (rows=1313165 width=492)
            predicate:(_col3 > _col4)
            Merge Join Operator [MERGEJOIN_159] (rows=3939496 width=492)
              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
            <-Reducer 11 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_196]
                Select Operator [SEL_195] (rows=1 width=112)
                  Output:["_col0"]
                  Filter Operator [FIL_194] (rows=1 width=120)
                    predicate:(_col0 is not null and _col1 is not null)
                    Group By Operator [GBY_193] (rows=1 width=120)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                    <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_192]
                        Group By Operator [GBY_191] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(_col10)","count(_col10)"]
                          Select Operator [SEL_190] (rows=576061174 width=932)
                            Output:["_col10"]
                            Group By Operator [GBY_189] (rows=576061174 width=932)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9
                            <-Reducer 9 [SIMPLE_EDGE]
                              SHUFFLE [RS_83]
                                PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                                Group By Operator [GBY_82] (rows=576061174 width=932)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(_col18)"],keys:_col11, _col12, _col1, _col5, _col7, _col20, _col21, _col22, _col23, _col24
                                  Merge Join Operator [MERGEJOIN_158] (rows=589731269 width=928)
                                    Conds:RS_78._col14, _col17=RS_182._col0, _col1(Inner),Output:["_col1","_col5","_col7","_col11","_col12","_col18","_col20","_col21","_col22","_col23","_col24"]
                                  <-Map 18 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_182]
                                      PartitionCols:_col0, _col1
                                      Select Operator [SEL_180] (rows=57591150 width=8)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_179] (rows=57591150 width=8)
                                          predicate:(sr_item_sk is not null and sr_ticket_number is not null)
                                          TableScan [TS_23] (rows=57591150 width=8)
                                            default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                  <-Reducer 8 [SIMPLE_EDGE]
                                    SHUFFLE [RS_78]
                                      PartitionCols:_col14, _col17
                                      Merge Join Operator [MERGEJOIN_157] (rows=576061174 width=936)
                                        Conds:RS_75._col14=RS_169._col0(Inner),Output:["_col1","_col5","_col7","_col11","_col12","_col14","_col17","_col18","_col20","_col21","_col22","_col23","_col24"]
                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_169]
                                          PartitionCols:_col0
                                          Select Operator [SEL_167] (rows=462000 width=384)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_165] (rows=462000 width=384)
                                              predicate:i_item_sk is not null
                                              TableScan [TS_3] (rows=462000 width=384)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_size","i_color","i_units","i_manager_id"]
                                      <-Reducer 7 [SIMPLE_EDGE]
                                        SHUFFLE [RS_75]
                                          PartitionCols:_col14
                                          Merge Join Operator [MERGEJOIN_156] (rows=576061174 width=555)
                                            Conds:RS_72._col9, _col4=RS_163._col1, _col2(Inner),Output:["_col1","_col5","_col7","_col11","_col12","_col14","_col17","_col18"]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_163]
                                              PartitionCols:_col1, _col2
                                              Select Operator [SEL_161] (rows=525333486 width=122)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Filter Operator [FIL_160] (rows=525333486 width=122)
                                                  predicate:(ss_customer_sk is not null and ss_item_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                  TableScan [TS_0] (rows=575995635 width=122)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                          <-Reducer 15 [SIMPLE_EDGE]
                                            SHUFFLE [RS_72]
                                              PartitionCols:_col9, _col4
                                              Filter Operator [FIL_21] (rows=7276996 width=637)
                                                predicate:(_col13 <> upper(_col3))
                                                Merge Join Operator [MERGEJOIN_151] (rows=7276996 width=637)
                                                  Conds:RS_18._col0=RS_178._col1(Inner),Output:["_col1","_col3","_col4","_col5","_col7","_col9","_col11","_col12","_col13"]
                                                <-Map 17 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_178]
                                                    PartitionCols:_col1
                                                    Select Operator [SEL_177] (rows=80000000 width=280)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_176] (rows=80000000 width=280)
                                                        predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                                                        TableScan [TS_12] (rows=80000000 width=280)
                                                          default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk","c_first_name","c_last_name","c_birth_country"]
                                                <-Reducer 14 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_18]
                                                    PartitionCols:_col0
                                                    Merge Join Operator [MERGEJOIN_150] (rows=611379 width=365)
                                                      Conds:RS_172._col2=RS_175._col4(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col7"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_172]
                                                        PartitionCols:_col2
                                                        Select Operator [SEL_171] (rows=40000000 width=276)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_170] (rows=40000000 width=276)
                                                            predicate:(ca_address_sk is not null and ca_zip is not null)
                                                            TableScan [TS_6] (rows=40000000 width=276)
                                                              default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state","ca_zip","ca_country"]
                                                    <-Map 16 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_175]
                                                        PartitionCols:_col4
                                                        Select Operator [SEL_174] (rows=155 width=271)
                                                          Output:["_col0","_col1","_col3","_col4"]
                                                          Filter Operator [FIL_173] (rows=155 width=271)
                                                            predicate:((s_market_id = 7) and s_store_sk is not null and s_zip is not null)
                                                            TableScan [TS_9] (rows=1704 width=270)
                                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_market_id","s_state","s_zip"]
            <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_188]
                Filter Operator [FIL_187] (rows=3939496 width=380)
                  predicate:_col3 is not null
                  Select Operator [SEL_186] (rows=3939496 width=380)
                    Output:["_col0","_col1","_col2","_col3"]
                    Group By Operator [GBY_185] (rows=3939496 width=380)
                      Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col9)"],keys:_col4, _col5, _col7
                      Select Operator [SEL_184] (rows=84010488 width=843)
                        Output:["_col4","_col5","_col7","_col9"]
                        Group By Operator [GBY_183] (rows=84010488 width=843)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8
                        <-Reducer 4 [SIMPLE_EDGE]
                          SHUFFLE [RS_37]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_36] (rows=84010488 width=843)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(_col4)"],keys:_col13, _col14, _col21, _col6, _col7, _col9, _col10, _col17, _col23
                              Merge Join Operator [MERGEJOIN_153] (rows=138508741 width=824)
                                Conds:RS_32._col0, _col3=RS_181._col0, _col1(Inner),Output:["_col4","_col6","_col7","_col9","_col10","_col13","_col14","_col17","_col21","_col23"]
                              <-Map 18 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_181]
                                  PartitionCols:_col0, _col1
                                   Please refer to the previous Select Operator [SEL_180]
                              <-Reducer 3 [SIMPLE_EDGE]
                                SHUFFLE [RS_32]
                                  PartitionCols:_col0, _col3
                                  Merge Join Operator [MERGEJOIN_152] (rows=84010488 width=820)
                                    Conds:RS_29._col1, _col2=RS_30._col0, _col9(Inner),Output:["_col0","_col3","_col4","_col6","_col7","_col9","_col10","_col13","_col14","_col17","_col21","_col23"]
                                  <-Reducer 15 [SIMPLE_EDGE]
                                    SHUFFLE [RS_30]
                                      PartitionCols:_col0, _col9
                                      Select Operator [SEL_22] (rows=7276996 width=637)
                                        Output:["_col0","_col2","_col3","_col6","_col9","_col10","_col12"]
                                         Please refer to the previous Filter Operator [FIL_21]
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    SHUFFLE [RS_29]
                                      PartitionCols:_col1, _col2
                                      Merge Join Operator [MERGEJOIN_149] (rows=76612563 width=382)
                                        Conds:RS_162._col0=RS_168._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col7","_col9","_col10"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_162]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_161]
                                      <-Map 12 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_168]
                                          PartitionCols:_col0
                                          Select Operator [SEL_166] (rows=7000 width=385)
                                            Output:["_col0","_col1","_col2","_col4","_col5"]
                                            Filter Operator [FIL_164] (rows=7000 width=384)
                                              predicate:((i_color = 'orchid') and i_item_sk is not null)
                                               Please refer to the previous TableScan [TS_3]

