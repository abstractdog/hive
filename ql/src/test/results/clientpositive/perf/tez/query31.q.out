PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 1 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 12 <- Map 26 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 16 <- Map 26 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 20 <- Map 14 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 21 <- Map 26 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 14 (SIMPLE_EDGE), Map 27 (SIMPLE_EDGE)
Reducer 24 <- Map 26 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE)
Reducer 3 <- Map 26 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 10 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 13 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 19 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 9 <- Map 26 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7
      File Output Operator [FS_139]
        Select Operator [SEL_138] (rows=304 width=550)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_136] (rows=304 width=770)
            predicate:((((_col1 > 0) is true and (((_col9 > 0) is true and ((_col11 / _col9) > (_col5 / _col1))) or (null and (_col9 > 0) is not true))) or (null and (_col1 > 0) is not true)) and (((_col3 > 0) is true and (((_col7 > 0) is true and ((_col9 / _col7) > (_col1 / _col3))) or (null and (_col7 > 0) is not true))) or (null and (_col3 > 0) is not true)))
            Merge Join Operator [MERGEJOIN_252] (rows=440 width=770)
              Conds:RS_133._col0=RS_134._col0(Inner),Output:["_col0","_col1","_col3","_col5","_col7","_col9","_col11"]
            <-Reducer 19 [SIMPLE_EDGE]
              SHUFFLE [RS_134]
                PartitionCols:_col0
                Merge Join Operator [MERGEJOIN_251] (rows=440 width=434)
                  Conds:RS_123._col0=RS_300._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                <-Reducer 18 [SIMPLE_EDGE]
                  SHUFFLE [RS_123]
                    PartitionCols:_col0
                    Merge Join Operator [MERGEJOIN_250] (rows=440 width=322)
                      Conds:RS_296._col0=RS_298._col0(Inner),Output:["_col0","_col1","_col3"]
                    <-Reducer 17 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_296]
                        PartitionCols:_col0
                        Group By Operator [GBY_295] (rows=440 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 16 [SIMPLE_EDGE]
                          SHUFFLE [RS_77]
                            PartitionCols:_col0
                            Group By Operator [GBY_76] (rows=3960 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                              Merge Join Operator [MERGEJOIN_243] (rows=10246882 width=209)
                                Conds:RS_72._col1=RS_281._col0(Inner),Output:["_col2","_col7"]
                              <-Map 26 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_281]
                                  PartitionCols:_col0
                                  Select Operator [SEL_277] (rows=40000000 width=102)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_276] (rows=40000000 width=102)
                                      predicate:(ca_address_sk is not null and ca_county is not null)
                                      TableScan [TS_6] (rows=40000000 width=102)
                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                              <-Reducer 15 [SIMPLE_EDGE]
                                SHUFFLE [RS_72]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_242] (rows=10246882 width=115)
                                    Conds:RS_292._col0=RS_273._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 14 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_273]
                                      PartitionCols:_col0
                                      Select Operator [SEL_267] (rows=130 width=12)
                                        Output:["_col0"]
                                        Filter Operator [FIL_261] (rows=130 width=12)
                                          predicate:((d_qoy = 1) and (d_year = 2000) and d_date_sk is not null)
                                          TableScan [TS_3] (rows=73049 width=12)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_292]
                                      PartitionCols:_col0
                                      Select Operator [SEL_291] (rows=143931246 width=119)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_290] (rows=143931246 width=119)
                                          predicate:(ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                          TableScan [TS_60] (rows=144002668 width=119)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                    <-Reducer 22 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_298]
                        PartitionCols:_col0
                        Group By Operator [GBY_297] (rows=440 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 21 [SIMPLE_EDGE]
                          SHUFFLE [RS_97]
                            PartitionCols:_col0
                            Group By Operator [GBY_96] (rows=3960 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                              Merge Join Operator [MERGEJOIN_245] (rows=10246882 width=209)
                                Conds:RS_92._col1=RS_282._col0(Inner),Output:["_col2","_col7"]
                              <-Map 26 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_282]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_277]
                              <-Reducer 20 [SIMPLE_EDGE]
                                SHUFFLE [RS_92]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_244] (rows=10246882 width=115)
                                    Conds:RS_293._col0=RS_274._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 14 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_274]
                                      PartitionCols:_col0
                                      Select Operator [SEL_268] (rows=130 width=12)
                                        Output:["_col0"]
                                        Filter Operator [FIL_262] (rows=130 width=12)
                                          predicate:((d_qoy = 2) and (d_year = 2000) and d_date_sk is not null)
                                           Please refer to the previous TableScan [TS_3]
                                  <-Map 27 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_293]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_291]
                <-Reducer 25 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_300]
                    PartitionCols:_col0
                    Group By Operator [GBY_299] (rows=440 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 24 [SIMPLE_EDGE]
                      SHUFFLE [RS_117]
                        PartitionCols:_col0
                        Group By Operator [GBY_116] (rows=3960 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                          Merge Join Operator [MERGEJOIN_247] (rows=10246882 width=209)
                            Conds:RS_112._col1=RS_283._col0(Inner),Output:["_col2","_col7"]
                          <-Map 26 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_283]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_277]
                          <-Reducer 23 [SIMPLE_EDGE]
                            SHUFFLE [RS_112]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_246] (rows=10246882 width=115)
                                Conds:RS_294._col0=RS_275._col0(Inner),Output:["_col1","_col2"]
                              <-Map 14 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_275]
                                  PartitionCols:_col0
                                  Select Operator [SEL_269] (rows=130 width=12)
                                    Output:["_col0"]
                                    Filter Operator [FIL_263] (rows=130 width=12)
                                      predicate:((d_qoy = 3) and (d_year = 2000) and d_date_sk is not null)
                                       Please refer to the previous TableScan [TS_3]
                              <-Map 27 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_294]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_291]
            <-Reducer 6 [SIMPLE_EDGE]
              SHUFFLE [RS_133]
                PartitionCols:_col0
                Merge Join Operator [MERGEJOIN_249] (rows=1605 width=434)
                  Conds:RS_130._col0=RS_289._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                <-Reducer 13 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_289]
                    PartitionCols:_col0
                    Group By Operator [GBY_288] (rows=1605 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 12 [SIMPLE_EDGE]
                      SHUFFLE [RS_57]
                        PartitionCols:_col0
                        Group By Operator [GBY_56] (rows=33705 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                          Merge Join Operator [MERGEJOIN_241] (rows=37399561 width=139)
                            Conds:RS_52._col1=RS_280._col0(Inner),Output:["_col2","_col7"]
                          <-Map 26 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_280]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_277]
                          <-Reducer 11 [SIMPLE_EDGE]
                            SHUFFLE [RS_52]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_240] (rows=37399561 width=42)
                                Conds:RS_257._col0=RS_272._col0(Inner),Output:["_col1","_col2"]
                              <-Map 14 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_272]
                                  PartitionCols:_col0
                                  Select Operator [SEL_266] (rows=130 width=12)
                                    Output:["_col0"]
                                    Filter Operator [FIL_260] (rows=130 width=12)
                                      predicate:((d_qoy = 3) and (d_year = 2000) and d_date_sk is not null)
                                       Please refer to the previous TableScan [TS_3]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_257]
                                  PartitionCols:_col0
                                  Select Operator [SEL_254] (rows=525327191 width=114)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_253] (rows=525327191 width=114)
                                      predicate:(ss_addr_sk is not null and ss_sold_date_sk is not null)
                                      TableScan [TS_0] (rows=575995635 width=114)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_130]
                    PartitionCols:_col0
                    Merge Join Operator [MERGEJOIN_248] (rows=1605 width=322)
                      Conds:RS_285._col0=RS_287._col0(Inner),Output:["_col0","_col1","_col3"]
                    <-Reducer 10 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_287]
                        PartitionCols:_col0
                        Group By Operator [GBY_286] (rows=1605 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 9 [SIMPLE_EDGE]
                          SHUFFLE [RS_37]
                            PartitionCols:_col0
                            Group By Operator [GBY_36] (rows=33705 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                              Merge Join Operator [MERGEJOIN_239] (rows=37399561 width=139)
                                Conds:RS_32._col1=RS_279._col0(Inner),Output:["_col2","_col7"]
                              <-Map 26 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_279]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_277]
                              <-Reducer 8 [SIMPLE_EDGE]
                                SHUFFLE [RS_32]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_238] (rows=37399561 width=42)
                                    Conds:RS_256._col0=RS_271._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 14 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_271]
                                      PartitionCols:_col0
                                      Select Operator [SEL_265] (rows=130 width=12)
                                        Output:["_col0"]
                                        Filter Operator [FIL_259] (rows=130 width=12)
                                          predicate:((d_qoy = 1) and (d_year = 2000) and d_date_sk is not null)
                                           Please refer to the previous TableScan [TS_3]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_256]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_254]
                    <-Reducer 4 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_285]
                        PartitionCols:_col0
                        Group By Operator [GBY_284] (rows=1605 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_17]
                            PartitionCols:_col0
                            Group By Operator [GBY_16] (rows=33705 width=210)
                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col7
                              Merge Join Operator [MERGEJOIN_237] (rows=37399561 width=139)
                                Conds:RS_12._col1=RS_278._col0(Inner),Output:["_col2","_col7"]
                              <-Map 26 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_278]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_277]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_12]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_236] (rows=37399561 width=42)
                                    Conds:RS_255._col0=RS_270._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 14 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_270]
                                      PartitionCols:_col0
                                      Select Operator [SEL_264] (rows=130 width=12)
                                        Output:["_col0"]
                                        Filter Operator [FIL_258] (rows=130 width=12)
                                          predicate:((d_qoy = 2) and (d_year = 2000) and d_date_sk is not null)
                                           Please refer to the previous TableScan [TS_3]
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_255]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_254]

