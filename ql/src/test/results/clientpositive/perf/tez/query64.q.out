PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 34 <- Reducer 37 (BROADCAST_EDGE)
Map 41 <- Reducer 37 (BROADCAST_EDGE)
Map 50 <- Reducer 39 (BROADCAST_EDGE)
Map 51 <- Reducer 39 (BROADCAST_EDGE)
Reducer 10 <- Reducer 14 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 29 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 13 <- Map 49 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 17 <- Map 40 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Reducer 43 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 20 <- Map 47 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 33 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 48 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 15 (SIMPLE_EDGE), Reducer 38 (SIMPLE_EDGE)
Reducer 24 <- Map 40 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE)
Reducer 27 <- Map 47 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Map 33 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Map 48 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 31 <- Map 30 (SIMPLE_EDGE), Map 32 (SIMPLE_EDGE)
Reducer 35 <- Map 34 (SIMPLE_EDGE), Map 36 (SIMPLE_EDGE)
Reducer 37 <- Map 36 (CUSTOM_SIMPLE_EDGE)
Reducer 38 <- Map 36 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE)
Reducer 39 <- Map 36 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 42 <- Map 41 (SIMPLE_EDGE), Map 44 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (SIMPLE_EDGE)
Reducer 45 <- Map 44 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE)
Reducer 46 <- Reducer 45 (SIMPLE_EDGE)
Reducer 5 <- Map 33 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 49 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 22 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 49 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 11 vectorized
      File Output Operator [FS_1184]
        Select Operator [SEL_1183] (rows=2169965329 width=1702)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 10 [SIMPLE_EDGE]
          SHUFFLE [RS_263]
            Select Operator [SEL_262] (rows=2169965329 width=1694)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_261] (rows=2169965329 width=1694)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_1091] (rows=6509895988 width=1694)
                  Conds:RS_1164._col2, _col1, _col3=RS_1182._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 14 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1182]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_1181] (rows=2299138 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Filter Operator [FIL_1180] (rows=2299138 width=1362)
                        predicate:_col14 is not null
                        Select Operator [SEL_1179] (rows=2299138 width=1362)
                          Output:["_col1","_col2","_col3","_col14","_col15","_col16","_col17"]
                          Group By Operator [GBY_1178] (rows=2299138 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                          <-Reducer 13 [SIMPLE_EDGE]
                            SHUFFLE [RS_253]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                              Group By Operator [GBY_252] (rows=2299138 width=1362)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col43)","sum(_col44)","sum(_col45)"],keys:_col28, _col46, _col29, _col7, _col9, _col14, _col15, _col16, _col17, _col23, _col24, _col25, _col26, _col49
                                Select Operator [SEL_251] (rows=2331650 width=1292)
                                  Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col23","_col24","_col25","_col26","_col28","_col29","_col43","_col44","_col45","_col46","_col49"]
                                  Filter Operator [FIL_250] (rows=2331650 width=1292)
                                    predicate:(_col56 <> _col19)
                                    Merge Join Operator [MERGEJOIN_1090] (rows=2331650 width=1292)
                                      Conds:RS_247._col37=RS_1120._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col43","_col44","_col45","_col46","_col49","_col56"]
                                    <-Map 49 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_1120]
                                        PartitionCols:_col0
                                        Select Operator [SEL_1117] (rows=1861800 width=89)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_1116] (rows=1861800 width=89)
                                            predicate:cd_demo_sk is not null
                                            TableScan [TS_97] (rows=1861800 width=89)
                                              default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                    <-Reducer 12 [SIMPLE_EDGE]
                                      SHUFFLE [RS_247]
                                        PartitionCols:_col37
                                        Merge Join Operator [MERGEJOIN_1089] (rows=2299138 width=1205)
                                          Conds:RS_244._col0=RS_245._col16(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col37","_col43","_col44","_col45","_col46","_col49"]
                                        <-Reducer 6 [SIMPLE_EDGE]
                                          SHUFFLE [RS_244]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_1060] (rows=70357394 width=458)
                                              Conds:RS_112._col1=RS_1119._col0(Inner),Output:["_col0","_col7","_col9","_col14","_col15","_col16","_col17","_col19"]
                                            <-Map 49 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_1119]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_1117]
                                            <-Reducer 5 [SIMPLE_EDGE]
                                              SHUFFLE [RS_112]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_1059] (rows=69376329 width=376)
                                                  Conds:RS_109._col3=RS_1113._col0(Inner),Output:["_col0","_col1","_col7","_col9","_col14","_col15","_col16","_col17"]
                                                <-Map 33 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_1113]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_1112] (rows=40000000 width=365)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_1111] (rows=40000000 width=365)
                                                        predicate:ca_address_sk is not null
                                                        TableScan [TS_19] (rows=40000000 width=365)
                                                          default@customer_address,ad2,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                                <-Reducer 4 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_109]
                                                    PartitionCols:_col3
                                                    Merge Join Operator [MERGEJOIN_1058] (rows=69376329 width=19)
                                                      Conds:RS_106._col2=RS_107._col0(Inner),Output:["_col0","_col1","_col3","_col7","_col9"]
                                                    <-Reducer 31 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_107]
                                                        PartitionCols:_col0
                                                        Merge Join Operator [MERGEJOIN_1057] (rows=7200 width=4)
                                                          Conds:RS_1107._col1=RS_1110._col0(Inner),Output:["_col0"]
                                                        <-Map 30 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1107]
                                                            PartitionCols:_col1
                                                            Select Operator [SEL_1106] (rows=7200 width=8)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1105] (rows=7200 width=8)
                                                                predicate:(hd_demo_sk is not null and hd_income_band_sk is not null)
                                                                TableScan [TS_9] (rows=7200 width=8)
                                                                  default@household_demographics,hd2,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1110]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1109] (rows=20 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_1108] (rows=20 width=4)
                                                                predicate:ib_income_band_sk is not null
                                                                TableScan [TS_12] (rows=20 width=4)
                                                                  default@income_band,ib2,Tbl:COMPLETE,Col:COMPLETE,Output:["ib_income_band_sk"]
                                                    <-Reducer 3 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_106]
                                                        PartitionCols:_col2
                                                        Merge Join Operator [MERGEJOIN_1056] (rows=69376329 width=23)
                                                          Conds:RS_103._col4=RS_1102._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col7","_col9"]
                                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_1102]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_1098] (rows=73049 width=8)
                                                              Output:["_col0","_col1"]
                                                              Filter Operator [FIL_1095] (rows=73049 width=8)
                                                                predicate:d_date_sk is not null
                                                                TableScan [TS_3] (rows=73049 width=8)
                                                                  default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Reducer 2 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_103]
                                                            PartitionCols:_col4
                                                            Merge Join Operator [MERGEJOIN_1055] (rows=69376329 width=23)
                                                              Conds:RS_1094._col5=RS_1101._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col7"]
                                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_1101]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_1098]
                                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_1094]
                                                                PartitionCols:_col5
                                                                Select Operator [SEL_1093] (rows=69376329 width=23)
                                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                  Filter Operator [FIL_1092] (rows=69376329 width=23)
                                                                    predicate:(c_first_shipto_date_sk is not null and c_first_sales_date_sk is not null and c_current_hdemo_sk is not null and c_current_cdemo_sk is not null and c_customer_sk is not null and c_current_addr_sk is not null)
                                                                    TableScan [TS_0] (rows=80000000 width=23)
                                                                      default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                        <-Reducer 29 [SIMPLE_EDGE]
                                          SHUFFLE [RS_245]
                                            PartitionCols:_col16
                                            Select Operator [SEL_225] (rows=2651207 width=784)
                                              Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col16","_col17","_col23","_col24","_col25","_col26","_col29"]
                                              Merge Join Operator [MERGEJOIN_1088] (rows=2651207 width=784)
                                                Conds:RS_222._col5, _col12=RS_1159._col0, _col1(Inner),Output:["_col6","_col7","_col13","_col14","_col15","_col16","_col19","_col26","_col27","_col29","_col30","_col31","_col32"]
                                              <-Map 48 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1159]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_1157] (rows=57591150 width=8)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_1156] (rows=57591150 width=8)
                                                      predicate:(sr_item_sk is not null and sr_ticket_number is not null)
                                                      TableScan [TS_75] (rows=57591150 width=8)
                                                        default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                              <-Reducer 28 [SIMPLE_EDGE]
                                                SHUFFLE [RS_222]
                                                  PartitionCols:_col5, _col12
                                                  Merge Join Operator [MERGEJOIN_1087] (rows=1608052 width=657)
                                                    Conds:RS_219._col9=RS_1115._col0(Inner),Output:["_col5","_col6","_col7","_col12","_col13","_col14","_col15","_col16","_col19","_col26","_col27","_col29","_col30","_col31","_col32"]
                                                  <-Map 33 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1115]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1112]
                                                  <-Reducer 27 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_219]
                                                      PartitionCols:_col9
                                                      Merge Join Operator [MERGEJOIN_1086] (rows=1608052 width=296)
                                                        Conds:RS_216._col10=RS_1155._col0(Inner),Output:["_col5","_col6","_col7","_col9","_col12","_col13","_col14","_col15","_col16","_col19","_col26","_col27"]
                                                      <-Map 47 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1155]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_1153] (rows=1704 width=181)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_1152] (rows=1704 width=181)
                                                              predicate:(s_store_sk is not null and s_store_name is not null and s_zip is not null)
                                                              TableScan [TS_69] (rows=1704 width=181)
                                                                default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                                      <-Reducer 26 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_216]
                                                          PartitionCols:_col10
                                                          Merge Join Operator [MERGEJOIN_1085] (rows=1608052 width=119)
                                                            Conds:RS_213._col5=RS_1177._col0(Inner),Output:["_col5","_col6","_col7","_col9","_col10","_col12","_col13","_col14","_col15","_col16","_col19"]
                                                          <-Reducer 25 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_213]
                                                              PartitionCols:_col5
                                                              Merge Join Operator [MERGEJOIN_1084] (rows=1608052 width=119)
                                                                Conds:RS_210._col0=RS_211._col5(Inner),Output:["_col5","_col6","_col7","_col9","_col10","_col12","_col13","_col14","_col15","_col16","_col19"]
                                                              <-Reducer 31 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_210]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Merge Join Operator [MERGEJOIN_1057]
                                                              <-Reducer 24 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_211]
                                                                  PartitionCols:_col5
                                                                  Select Operator [SEL_181] (rows=1608052 width=119)
                                                                    Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col16"]
                                                                    Merge Join Operator [MERGEJOIN_1082] (rows=1608052 width=119)
                                                                      Conds:RS_178._col7=RS_1140._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                    <-Map 40 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_1140]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_1138] (rows=2300 width=4)
                                                                          Output:["_col0"]
                                                                          Filter Operator [FIL_1137] (rows=2300 width=4)
                                                                            predicate:p_promo_sk is not null
                                                                            TableScan [TS_40] (rows=2300 width=4)
                                                                              default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk"]
                                                                    <-Reducer 23 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_178]
                                                                        PartitionCols:_col7
                                                                        Merge Join Operator [MERGEJOIN_1081] (rows=1608052 width=119)
                                                                          Conds:RS_175._col0=RS_1104._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1104]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1100] (rows=652 width=8)
                                                                              Output:["_col0"]
                                                                              Filter Operator [FIL_1097] (rows=652 width=8)
                                                                                predicate:((d_year = 2001) and d_date_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_3]
                                                                        <-Reducer 38 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_175]
                                                                            PartitionCols:_col0
                                                                            Merge Join Operator [MERGEJOIN_1080] (rows=4503592 width=119)
                                                                              Conds:RS_1170._col1=RS_1125._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                            <-Map 36 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1125]
                                                                                PartitionCols:_col0
                                                                                Select Operator [SEL_1122] (rows=518 width=312)
                                                                                  Output:["_col0","_col3"]
                                                                                  Filter Operator [FIL_1121] (rows=518 width=312)
                                                                                    predicate:(i_current_price BETWEEN 35 AND 45 and i_current_price BETWEEN 36 AND 50 and (i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_item_sk is not null)
                                                                                    TableScan [TS_34] (rows=462000 width=311)
                                                                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                                                            <-Map 50 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1170]
                                                                                PartitionCols:_col1
                                                                                Select Operator [SEL_1169] (rows=417313408 width=355)
                                                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                                  Filter Operator [FIL_1168] (rows=417313408 width=355)
                                                                                    predicate:(ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_promo_sk is not null and ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_item_sk is not null and ss_ticket_number is not null and ss_item_sk BETWEEN DynamicValue(RS_173_item_i_item_sk_min) AND DynamicValue(RS_173_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_173_item_i_item_sk_bloom_filter)))
                                                                                    TableScan [TS_160] (rows=575995635 width=355)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                    <-Reducer 39 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1166]
                                                                                        Group By Operator [GBY_1165] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 36 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1130]
                                                                                            Group By Operator [GBY_1128] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1126] (rows=518 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1122]
                                                          <-Reducer 46 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1177]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1176] (rows=13257 width=228)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1175] (rows=13257 width=228)
                                                                  predicate:(_col1 > (2 * _col2))
                                                                  Group By Operator [GBY_1174] (rows=39773 width=228)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                  <-Reducer 45 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_194]
                                                                      PartitionCols:_col0
                                                                      Group By Operator [GBY_193] (rows=12806906 width=228)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                                                        Select Operator [SEL_191] (rows=183085709 width=450)
                                                                          Output:["_col0","_col1","_col2"]
                                                                          Merge Join Operator [MERGEJOIN_1083] (rows=183085709 width=450)
                                                                            Conds:RS_1173._col0, _col1=RS_1147._col0, _col1(Inner),Output:["_col0","_col2","_col5","_col6","_col7"]
                                                                          <-Map 44 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1147]
                                                                              PartitionCols:_col0, _col1
                                                                              Select Operator [SEL_1145] (rows=28798881 width=337)
                                                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                                                Filter Operator [FIL_1144] (rows=28798881 width=337)
                                                                                  predicate:(cr_item_sk is not null and cr_order_number is not null)
                                                                                  TableScan [TS_56] (rows=28798881 width=337)
                                                                                    default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                                                          <-Map 51 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1173]
                                                                              PartitionCols:_col0, _col1
                                                                              Select Operator [SEL_1172] (rows=287989836 width=119)
                                                                                Output:["_col0","_col1","_col2"]
                                                                                Filter Operator [FIL_1171] (rows=287989836 width=119)
                                                                                  predicate:(cs_item_sk is not null and cs_order_number is not null and cs_item_sk BETWEEN DynamicValue(RS_173_item_i_item_sk_min) AND DynamicValue(RS_173_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_173_item_i_item_sk_bloom_filter)))
                                                                                  TableScan [TS_182] (rows=287989836 width=119)
                                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                  <-Reducer 39 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1167]
                                                                                       Please refer to the previous Group By Operator [GBY_1165]
                <-Reducer 9 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_1164]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_1163] (rows=2299138 width=1354)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Filter Operator [FIL_1162] (rows=2299138 width=1362)
                        predicate:_col14 is not null
                        Select Operator [SEL_1161] (rows=2299138 width=1362)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col14","_col15","_col16","_col17"]
                          Group By Operator [GBY_1160] (rows=2299138 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                          <-Reducer 8 [SIMPLE_EDGE]
                            SHUFFLE [RS_124]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                              Group By Operator [GBY_123] (rows=2299138 width=1362)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col43)","sum(_col44)","sum(_col45)"],keys:_col28, _col46, _col29, _col7, _col9, _col14, _col15, _col16, _col17, _col23, _col24, _col25, _col26, _col49
                                Select Operator [SEL_122] (rows=2331650 width=1292)
                                  Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col23","_col24","_col25","_col26","_col28","_col29","_col43","_col44","_col45","_col46","_col49"]
                                  Filter Operator [FIL_121] (rows=2331650 width=1292)
                                    predicate:(_col56 <> _col19)
                                    Merge Join Operator [MERGEJOIN_1072] (rows=2331650 width=1292)
                                      Conds:RS_118._col37=RS_1118._col0(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col43","_col44","_col45","_col46","_col49","_col56"]
                                    <-Map 49 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_1118]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_1117]
                                    <-Reducer 7 [SIMPLE_EDGE]
                                      SHUFFLE [RS_118]
                                        PartitionCols:_col37
                                        Merge Join Operator [MERGEJOIN_1071] (rows=2299138 width=1205)
                                          Conds:RS_115._col0=RS_116._col16(Inner),Output:["_col7","_col9","_col14","_col15","_col16","_col17","_col19","_col23","_col24","_col25","_col26","_col28","_col29","_col37","_col43","_col44","_col45","_col46","_col49"]
                                        <-Reducer 6 [SIMPLE_EDGE]
                                          SHUFFLE [RS_115]
                                            PartitionCols:_col0
                                             Please refer to the previous Merge Join Operator [MERGEJOIN_1060]
                                        <-Reducer 22 [SIMPLE_EDGE]
                                          SHUFFLE [RS_116]
                                            PartitionCols:_col16
                                            Select Operator [SEL_96] (rows=2651207 width=784)
                                              Output:["_col3","_col4","_col5","_col6","_col8","_col9","_col16","_col17","_col23","_col24","_col25","_col26","_col29"]
                                              Merge Join Operator [MERGEJOIN_1070] (rows=2651207 width=784)
                                                Conds:RS_93._col5, _col12=RS_1158._col0, _col1(Inner),Output:["_col6","_col7","_col13","_col14","_col15","_col16","_col19","_col26","_col27","_col29","_col30","_col31","_col32"]
                                              <-Map 48 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_1158]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_1157]
                                              <-Reducer 21 [SIMPLE_EDGE]
                                                SHUFFLE [RS_93]
                                                  PartitionCols:_col5, _col12
                                                  Merge Join Operator [MERGEJOIN_1069] (rows=1608052 width=657)
                                                    Conds:RS_90._col9=RS_1114._col0(Inner),Output:["_col5","_col6","_col7","_col12","_col13","_col14","_col15","_col16","_col19","_col26","_col27","_col29","_col30","_col31","_col32"]
                                                  <-Map 33 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_1114]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_1112]
                                                  <-Reducer 20 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_90]
                                                      PartitionCols:_col9
                                                      Merge Join Operator [MERGEJOIN_1068] (rows=1608052 width=296)
                                                        Conds:RS_87._col10=RS_1154._col0(Inner),Output:["_col5","_col6","_col7","_col9","_col12","_col13","_col14","_col15","_col16","_col19","_col26","_col27"]
                                                      <-Map 47 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_1154]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_1153]
                                                      <-Reducer 19 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_87]
                                                          PartitionCols:_col10
                                                          Merge Join Operator [MERGEJOIN_1067] (rows=1608052 width=119)
                                                            Conds:RS_84._col5=RS_1151._col0(Inner),Output:["_col5","_col6","_col7","_col9","_col10","_col12","_col13","_col14","_col15","_col16","_col19"]
                                                          <-Reducer 18 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_84]
                                                              PartitionCols:_col5
                                                              Merge Join Operator [MERGEJOIN_1066] (rows=1608052 width=119)
                                                                Conds:RS_81._col0=RS_82._col5(Inner),Output:["_col5","_col6","_col7","_col9","_col10","_col12","_col13","_col14","_col15","_col16","_col19"]
                                                              <-Reducer 31 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_81]
                                                                  PartitionCols:_col0
                                                                   Please refer to the previous Merge Join Operator [MERGEJOIN_1057]
                                                              <-Reducer 17 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_82]
                                                                  PartitionCols:_col5
                                                                  Select Operator [SEL_52] (rows=1608052 width=119)
                                                                    Output:["_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10","_col11","_col12","_col13","_col16"]
                                                                    Merge Join Operator [MERGEJOIN_1064] (rows=1608052 width=119)
                                                                      Conds:RS_49._col7=RS_1139._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                    <-Map 40 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_1139]
                                                                        PartitionCols:_col0
                                                                         Please refer to the previous Select Operator [SEL_1138]
                                                                    <-Reducer 16 [SIMPLE_EDGE]
                                                                      SHUFFLE [RS_49]
                                                                        PartitionCols:_col7
                                                                        Merge Join Operator [MERGEJOIN_1063] (rows=1608052 width=119)
                                                                          Conds:RS_46._col0=RS_1103._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                        <-Map 15 [SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_1103]
                                                                            PartitionCols:_col0
                                                                            Select Operator [SEL_1099] (rows=652 width=8)
                                                                              Output:["_col0"]
                                                                              Filter Operator [FIL_1096] (rows=652 width=8)
                                                                                predicate:((d_year = 2000) and d_date_sk is not null)
                                                                                 Please refer to the previous TableScan [TS_3]
                                                                        <-Reducer 35 [SIMPLE_EDGE]
                                                                          SHUFFLE [RS_46]
                                                                            PartitionCols:_col0
                                                                            Merge Join Operator [MERGEJOIN_1062] (rows=4503592 width=119)
                                                                              Conds:RS_1136._col1=RS_1123._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                                            <-Map 36 [SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_1123]
                                                                                PartitionCols:_col0
                                                                                 Please refer to the previous Select Operator [SEL_1122]
                                                                            <-Map 34 [SIMPLE_EDGE] vectorized
                                                                              SHUFFLE [RS_1136]
                                                                                PartitionCols:_col1
                                                                                Select Operator [SEL_1135] (rows=417313408 width=355)
                                                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                                                  Filter Operator [FIL_1134] (rows=417313408 width=355)
                                                                                    predicate:(ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_promo_sk is not null and ss_addr_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_store_sk is not null and ss_item_sk is not null and ss_ticket_number is not null and ss_item_sk BETWEEN DynamicValue(RS_44_item_i_item_sk_min) AND DynamicValue(RS_44_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_44_item_i_item_sk_bloom_filter)))
                                                                                    TableScan [TS_31] (rows=575995635 width=355)
                                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                                                                                    <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                                                      BROADCAST [RS_1132]
                                                                                        Group By Operator [GBY_1131] (rows=1 width=12)
                                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                        <-Map 36 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                          PARTITION_ONLY_SHUFFLE [RS_1129]
                                                                                            Group By Operator [GBY_1127] (rows=1 width=12)
                                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                              Select Operator [SEL_1124] (rows=518 width=4)
                                                                                                Output:["_col0"]
                                                                                                 Please refer to the previous Select Operator [SEL_1122]
                                                          <-Reducer 43 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_1151]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_1150] (rows=13257 width=228)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_1149] (rows=13257 width=228)
                                                                  predicate:(_col1 > (2 * _col2))
                                                                  Group By Operator [GBY_1148] (rows=39773 width=228)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                                  <-Reducer 42 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_65]
                                                                      PartitionCols:_col0
                                                                      Group By Operator [GBY_64] (rows=12806906 width=228)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["sum(_col1)","sum(_col2)"],keys:_col0
                                                                        Select Operator [SEL_62] (rows=183085709 width=450)
                                                                          Output:["_col0","_col1","_col2"]
                                                                          Merge Join Operator [MERGEJOIN_1065] (rows=183085709 width=450)
                                                                            Conds:RS_1143._col0, _col1=RS_1146._col0, _col1(Inner),Output:["_col0","_col2","_col5","_col6","_col7"]
                                                                          <-Map 44 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1146]
                                                                              PartitionCols:_col0, _col1
                                                                               Please refer to the previous Select Operator [SEL_1145]
                                                                          <-Map 41 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_1143]
                                                                              PartitionCols:_col0, _col1
                                                                              Select Operator [SEL_1142] (rows=287989836 width=119)
                                                                                Output:["_col0","_col1","_col2"]
                                                                                Filter Operator [FIL_1141] (rows=287989836 width=119)
                                                                                  predicate:(cs_item_sk is not null and cs_order_number is not null and cs_item_sk BETWEEN DynamicValue(RS_44_item_i_item_sk_min) AND DynamicValue(RS_44_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_44_item_i_item_sk_bloom_filter)))
                                                                                  TableScan [TS_53] (rows=287989836 width=119)
                                                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                                                  <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                                                    BROADCAST [RS_1133]
                                                                                       Please refer to the previous Group By Operator [GBY_1131]

