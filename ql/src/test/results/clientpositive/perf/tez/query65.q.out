PREHOOK: query: explain
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 5 <- Map 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 12 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_114]
        Limit [LIM_113] (rows=100 width=705)
          Number of rows:100
          Select Operator [SEL_112] (rows=56134 width=703)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_53]
              Select Operator [SEL_52] (rows=56134 width=703)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Merge Join Operator [MERGEJOIN_86] (rows=56134 width=703)
                  Conds:RS_49._col1=RS_111._col0(Inner),Output:["_col2","_col6","_col8","_col9","_col10","_col11"]
                <-Map 12 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_111]
                    PartitionCols:_col0
                    Select Operator [SEL_110] (rows=462000 width=511)
                      Output:["_col0","_col1","_col2","_col3","_col4"]
                      Filter Operator [FIL_109] (rows=462000 width=511)
                        predicate:i_item_sk is not null
                        TableScan [TS_39] (rows=462000 width=511)
                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc","i_current_price","i_wholesale_cost","i_brand"]
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_49]
                    PartitionCols:_col1
                    Merge Join Operator [MERGEJOIN_85] (rows=56134 width=204)
                      Conds:RS_46._col0=RS_108._col0(Inner),Output:["_col1","_col2","_col6"]
                    <-Map 11 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_108]
                        PartitionCols:_col0
                        Select Operator [SEL_107] (rows=1704 width=92)
                          Output:["_col0","_col1"]
                          Filter Operator [FIL_106] (rows=1704 width=92)
                            predicate:s_store_sk is not null
                            TableScan [TS_36] (rows=1704 width=92)
                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name"]
                    <-Reducer 4 [SIMPLE_EDGE]
                      SHUFFLE [RS_46]
                        PartitionCols:_col0
                        Filter Operator [FIL_45] (rows=56134 width=230)
                          predicate:(_col2 <= (0.1 * _col4))
                          Merge Join Operator [MERGEJOIN_84] (rows=168402 width=230)
                            Conds:RS_99._col0=RS_105._col0(Inner),Output:["_col0","_col1","_col2","_col4"]
                          <-Reducer 3 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_99]
                              PartitionCols:_col0
                              Filter Operator [FIL_98] (rows=168402 width=118)
                                predicate:_col2 is not null
                                Group By Operator [GBY_97] (rows=168402 width=118)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_11]
                                    PartitionCols:_col0, _col1
                                    Group By Operator [GBY_10] (rows=5557266 width=118)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                      Merge Join Operator [MERGEJOIN_82] (rows=91197860 width=89)
                                        Conds:RS_91._col0=RS_95._col0(Inner),Output:["_col1","_col2","_col3"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_91]
                                          PartitionCols:_col0
                                          Select Operator [SEL_89] (rows=525329897 width=118)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_87] (rows=525329897 width=118)
                                              predicate:(ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_0] (rows=575995635 width=118)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_sales_price"]
                                      <-Map 10 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_95]
                                          PartitionCols:_col0
                                          Select Operator [SEL_94] (rows=317 width=8)
                                            Output:["_col0"]
                                            Filter Operator [FIL_93] (rows=317 width=8)
                                              predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                              TableScan [TS_3] (rows=73049 width=8)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                          <-Reducer 9 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_105]
                              PartitionCols:_col0
                              Select Operator [SEL_104] (rows=16 width=115)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_103] (rows=16 width=123)
                                  predicate:(_col1 is not null and _col2 is not null)
                                  Group By Operator [GBY_102] (rows=16 width=123)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","count(_col2)"],keys:_col1
                                    Select Operator [SEL_101] (rows=173776 width=118)
                                      Output:["_col1","_col2"]
                                      Group By Operator [GBY_100] (rows=173776 width=118)
                                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1
                                      <-Reducer 8 [SIMPLE_EDGE]
                                        SHUFFLE [RS_27]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_26] (rows=5734608 width=118)
                                            Output:["_col0","_col1","_col2"],aggregations:["sum(_col3)"],keys:_col2, _col1
                                            Merge Join Operator [MERGEJOIN_83] (rows=91197860 width=89)
                                              Conds:RS_92._col0=RS_96._col0(Inner),Output:["_col1","_col2","_col3"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_92]
                                                PartitionCols:_col0
                                                Select Operator [SEL_90] (rows=525329897 width=118)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_88] (rows=525329897 width=118)
                                                    predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                                     Please refer to the previous TableScan [TS_0]
                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_96]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_94]

