PREHOOK: query: explain
with ws as
  (select d_year AS ws_sold_year, ws_item_sk,
    ws_bill_customer_sk ws_customer_sk,
    sum(ws_quantity) ws_qty,
    sum(ws_wholesale_cost) ws_wc,
    sum(ws_sales_price) ws_sp
   from web_sales
   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
   join date_dim on ws_sold_date_sk = d_date_sk
   where wr_order_number is null
   group by d_year, ws_item_sk, ws_bill_customer_sk
   ),
cs as
  (select d_year AS cs_sold_year, cs_item_sk,
    cs_bill_customer_sk cs_customer_sk,
    sum(cs_quantity) cs_qty,
    sum(cs_wholesale_cost) cs_wc,
    sum(cs_sales_price) cs_sp
   from catalog_sales
   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
   join date_dim on cs_sold_date_sk = d_date_sk
   where cr_order_number is null
   group by d_year, cs_item_sk, cs_bill_customer_sk
   ),
ss as
  (select d_year AS ss_sold_year, ss_item_sk,
    ss_customer_sk,
    sum(ss_quantity) ss_qty,
    sum(ss_wholesale_cost) ss_wc,
    sum(ss_sales_price) ss_sp
   from store_sales
   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
   join date_dim on ss_sold_date_sk = d_date_sk
   where sr_ticket_number is null
   group by d_year, ss_item_sk, ss_customer_sk
   )
 select 
ss_sold_year, ss_item_sk, ss_customer_sk,
round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2) ratio,
ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
from ss
left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=cs_item_sk and cs_customer_sk=ss_customer_sk)
where coalesce(ws_qty,0)>0 and coalesce(cs_qty, 0)>0 and ss_sold_year=2000
order by 
  ss_sold_year, ss_item_sk, ss_customer_sk,
  ss_qty desc, ss_wc desc, ss_sp desc,
  other_chan_qty,
  other_chan_wholesale_cost,
  other_chan_sales_price,
  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ws as
  (select d_year AS ws_sold_year, ws_item_sk,
    ws_bill_customer_sk ws_customer_sk,
    sum(ws_quantity) ws_qty,
    sum(ws_wholesale_cost) ws_wc,
    sum(ws_sales_price) ws_sp
   from web_sales
   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
   join date_dim on ws_sold_date_sk = d_date_sk
   where wr_order_number is null
   group by d_year, ws_item_sk, ws_bill_customer_sk
   ),
cs as
  (select d_year AS cs_sold_year, cs_item_sk,
    cs_bill_customer_sk cs_customer_sk,
    sum(cs_quantity) cs_qty,
    sum(cs_wholesale_cost) cs_wc,
    sum(cs_sales_price) cs_sp
   from catalog_sales
   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
   join date_dim on cs_sold_date_sk = d_date_sk
   where cr_order_number is null
   group by d_year, cs_item_sk, cs_bill_customer_sk
   ),
ss as
  (select d_year AS ss_sold_year, ss_item_sk,
    ss_customer_sk,
    sum(ss_quantity) ss_qty,
    sum(ss_wholesale_cost) ss_wc,
    sum(ss_sales_price) ss_sp
   from store_sales
   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
   join date_dim on ss_sold_date_sk = d_date_sk
   where sr_ticket_number is null
   group by d_year, ss_item_sk, ss_customer_sk
   )
 select 
ss_sold_year, ss_item_sk, ss_customer_sk,
round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2) ratio,
ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
from ss
left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=cs_item_sk and cs_customer_sk=ss_customer_sk)
where coalesce(ws_qty,0)>0 and coalesce(cs_qty, 0)>0 and ss_sold_year=2000
order by 
  ss_sold_year, ss_item_sk, ss_customer_sk,
  ss_qty desc, ss_wc desc, ss_sp desc,
  other_chan_qty,
  other_chan_wholesale_cost,
  other_chan_sales_price,
  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 19 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 5 <- Reducer 10 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_161]
        Limit [LIM_160] (rows=100 width=484)
          Number of rows:100
          Select Operator [SEL_159] (rows=111646124757 width=483)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_76]
              Select Operator [SEL_75] (rows=111646124757 width=719)
                Output:["_col0","_col1","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                Merge Join Operator [MERGEJOIN_124] (rows=111646124757 width=703)
                  Conds:RS_72._col0, _col1=RS_158._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col11","_col12","_col13"]
                <-Reducer 10 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_158]
                    PartitionCols:_col0, _col1
                    Filter Operator [FIL_157] (rows=13513323 width=239)
                      predicate:(_col2 > 0L)
                      Group By Operator [GBY_156] (rows=40539971 width=239)
                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                      <-Reducer 9 [SIMPLE_EDGE]
                        SHUFFLE [RS_65]
                          PartitionCols:_col0, _col1
                          Group By Operator [GBY_64] (rows=40539971 width=239)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col3, _col4
                            Merge Join Operator [MERGEJOIN_122] (rows=40539971 width=235)
                              Conds:RS_129._col0=RS_61._col0(Inner),Output:["_col3","_col4","_col6","_col7","_col8"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_129]
                                PartitionCols:_col0
                                Select Operator [SEL_126] (rows=652 width=8)
                                  Output:["_col0"]
                                  Filter Operator [FIL_125] (rows=652 width=8)
                                    predicate:((d_year = 2000) and d_date_sk is not null)
                                    TableScan [TS_0] (rows=73049 width=8)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                            <-Reducer 18 [SIMPLE_EDGE]
                              SHUFFLE [RS_61]
                                PartitionCols:_col0
                                Select Operator [SEL_59] (rows=113538342 width=242)
                                  Output:["_col0","_col1","_col2","_col4","_col5","_col6"]
                                  Filter Operator [FIL_58] (rows=113538342 width=242)
                                    predicate:_col8 is null
                                    Merge Join Operator [MERGEJOIN_121] (rows=254644510 width=242)
                                      Conds:RS_152._col1, _col3=RS_155._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5","_col6","_col8"]
                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_152]
                                        PartitionCols:_col1, _col3
                                        Select Operator [SEL_151] (rows=143930993 width=243)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                          Filter Operator [FIL_150] (rows=143930993 width=243)
                                            predicate:(ws_bill_customer_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                            TableScan [TS_49] (rows=144002668 width=243)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_order_number","ws_quantity","ws_wholesale_cost","ws_sales_price"]
                                    <-Map 19 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_155]
                                        PartitionCols:_col0, _col1
                                        Select Operator [SEL_154] (rows=14398467 width=8)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_153] (rows=14398467 width=8)
                                            predicate:(wr_item_sk is not null and wr_order_number is not null)
                                            TableScan [TS_52] (rows=14398467 width=8)
                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number"]
                <-Reducer 4 [SIMPLE_EDGE]
                  SHUFFLE [RS_72]
                    PartitionCols:_col0, _col1
                    Merge Join Operator [MERGEJOIN_123] (rows=4174026032 width=471)
                      Conds:RS_138._col1=RS_149._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col6","_col7","_col8"]
                    <-Reducer 3 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_138]
                        PartitionCols:_col1
                        Select Operator [SEL_137] (rows=114214965 width=239)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_136] (rows=114214965 width=239)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_19]
                              PartitionCols:_col0, _col1
                              Group By Operator [GBY_18] (rows=114214965 width=239)
                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col4, _col3
                                Merge Join Operator [MERGEJOIN_118] (rows=114214965 width=218)
                                  Conds:RS_127._col0=RS_15._col0(Inner),Output:["_col3","_col4","_col6","_col7","_col8"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_127]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_126]
                                <-Reducer 12 [SIMPLE_EDGE]
                                  SHUFFLE [RS_15]
                                    PartitionCols:_col0
                                    Select Operator [SEL_13] (rows=319876350 width=236)
                                      Output:["_col0","_col1","_col2","_col4","_col5","_col6"]
                                      Filter Operator [FIL_12] (rows=319876350 width=236)
                                        predicate:_col8 is null
                                        Merge Join Operator [MERGEJOIN_117] (rows=857669906 width=236)
                                          Conds:RS_132._col1, _col3=RS_135._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5","_col6","_col8"]
                                        <-Map 11 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_132]
                                            PartitionCols:_col1, _col3
                                            Select Operator [SEL_131] (rows=525327388 width=233)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                              Filter Operator [FIL_130] (rows=525327388 width=233)
                                                predicate:(ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null)
                                                TableScan [TS_3] (rows=575995635 width=233)
                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_ticket_number","ss_quantity","ss_wholesale_cost","ss_sales_price"]
                                        <-Map 13 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_135]
                                            PartitionCols:_col0, _col1
                                            Select Operator [SEL_134] (rows=57591150 width=8)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_133] (rows=57591150 width=8)
                                                predicate:(sr_item_sk is not null and sr_ticket_number is not null)
                                                TableScan [TS_6] (rows=57591150 width=8)
                                                  default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                    <-Reducer 8 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_149]
                        PartitionCols:_col0
                        Select Operator [SEL_148] (rows=16847407 width=235)
                          Output:["_col0","_col1","_col2","_col3"]
                          Filter Operator [FIL_147] (rows=16847407 width=239)
                            predicate:(_col2 > 0L)
                            Select Operator [SEL_146] (rows=50542222 width=239)
                              Output:["_col1","_col2","_col3","_col4"]
                              Group By Operator [GBY_145] (rows=50542222 width=239)
                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                              <-Reducer 7 [SIMPLE_EDGE]
                                SHUFFLE [RS_41]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_40] (rows=50542222 width=239)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col3, _col4
                                    Merge Join Operator [MERGEJOIN_120] (rows=50542222 width=233)
                                      Conds:RS_128._col0=RS_37._col0(Inner),Output:["_col3","_col4","_col6","_col7","_col8"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_128]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_126]
                                    <-Reducer 15 [SIMPLE_EDGE]
                                      SHUFFLE [RS_37]
                                        PartitionCols:_col0
                                        Select Operator [SEL_35] (rows=142558915 width=240)
                                          Output:["_col0","_col1","_col2","_col4","_col5","_col6"]
                                          Filter Operator [FIL_34] (rows=142558915 width=240)
                                            predicate:_col8 is null
                                            Merge Join Operator [MERGEJOIN_119] (rows=233188849 width=240)
                                              Conds:RS_141._col2, _col3=RS_144._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5","_col6","_col8"]
                                            <-Map 14 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_141]
                                                PartitionCols:_col2, _col3
                                                Select Operator [SEL_140] (rows=142558915 width=242)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                  Filter Operator [FIL_139] (rows=142558915 width=242)
                                                    predicate:((cs_item_sk = cs_item_sk) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                    TableScan [TS_25] (rows=287989836 width=242)
                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_order_number","cs_quantity","cs_wholesale_cost","cs_sales_price"]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_144]
                                                PartitionCols:_col0, _col1
                                                Select Operator [SEL_143] (rows=28798881 width=8)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_142] (rows=28798881 width=8)
                                                    predicate:(cr_item_sk is not null and cr_order_number is not null)
                                                    TableScan [TS_28] (rows=28798881 width=8)
                                                      default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number"]

